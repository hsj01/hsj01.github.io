[{"categories":["欢迎"],"content":"这是我用Hugo博客框架和它的LoveIt主题搭建的博客并托管在GitHub Pages上","date":"2023-06-20","objectID":"/posts/hello/","tags":["欢迎"],"title":"欢迎来到我的博客","uri":"/posts/hello/"},{"categories":["欢迎"],"content":"这是我用Hugo博客框架和它的LoveIt主题搭建的博客并托管在GitHub Pages上，我的哔哩哔哩主页。 ","date":"2023-06-20","objectID":"/posts/hello/:0:0","tags":["欢迎"],"title":"欢迎来到我的博客","uri":"/posts/hello/"},{"categories":["欢迎"],"content":"1 源起 学会上网以后不知是什么时候开始，我有了能拥有一个自己的网站是多么酷啊的想法。直到有一天我在哔哩哔哩上看到了UP主程序羊的视频搭建一个Hexo博客，我按照他的方法搭建了我人生中的第一个博客并且分别托管在了GitHub Pages和国内的Gitee Pages上，并没有给博客写什么内容就遗忘了，直到过了几年Gitee给我发短信让我实名认证不然就把我托管的网页停了，我才想起我还有个博客，不过那时我对博客的热情不再就没在管了。 ","date":"2023-06-20","objectID":"/posts/hello/:1:0","tags":["欢迎"],"title":"欢迎来到我的博客","uri":"/posts/hello/"},{"categories":["欢迎"],"content":"2 之后 又过了几年以后，我又心血来潮对博客起了兴趣，经过一番对比选择了Hugo搭建博客，这次还是看的UP主程序羊的视频，不过他的视频因为是几年前的也有些过时了，现在GitHub同步仓库需要用令牌了其他基本还是一样的。本来我是打算直托管在国内的Gitee Pages上的，但实名认证让我拍手举身份证的照片，我一个人也不好拍，就只能再托管在GitHub上了。国内访问GitHub并不方便，时能上传时不能上传。不过毕竟不要钱，不然服务器加域名就是一笔开销。 –2023.6.20 ","date":"2023-06-20","objectID":"/posts/hello/:2:0","tags":["欢迎"],"title":"欢迎来到我的博客","uri":"/posts/hello/"},{"categories":["欢迎"],"content":"3 回到hugo 原来这个hugo的博客所有的源文件都是存放在debian系统上的，更新了两次debian之后，一次更新声卡驱动不了了，没声音我也能凑活用，又更新一次后，网卡也驱动不了了，这下没法推博客到GitHub了，没办法我的技术也不行不知道怎末在本地部署hugo，就换了halo，它的编辑页面确实方便，虽然用习惯了Markdown有点不习惯，但是用习惯了感觉还是挺方便的。但是最近我发现java占用了大约400mb的运行内存，与halo使用的PostgreSQL数据库有关，加之我已经找到了docker部署nginx来展示静态博客的方法。于是决定换回hugo。 –2024.1.26 ","date":"2023-06-20","objectID":"/posts/hello/:3:0","tags":["欢迎"],"title":"欢迎来到我的博客","uri":"/posts/hello/"},{"categories":["欢迎"],"content":"4 回到GitHub Pages 我又回到了原点，把博客托管在了GitHub。 –2024.2.12 ","date":"2023-06-20","objectID":"/posts/hello/:4:0","tags":["欢迎"],"title":"欢迎来到我的博客","uri":"/posts/hello/"},{"categories":["欢迎"],"content":"5 后续 …… ","date":"2023-06-20","objectID":"/posts/hello/:5:0","tags":["欢迎"],"title":"欢迎来到我的博客","uri":"/posts/hello/"},{"categories":["教程"],"content":"这篇文章介绍了给docker拉去镜像添加代理的方法","date":"2024-06-11","objectID":"/posts/myblog41/","tags":["docker"],"title":"给docker拉取镜像添加代理","uri":"/posts/myblog41/"},{"categories":["教程"],"content":"这篇文章介绍了给docker拉去镜像添加代理的方法 注意 注1、谢谢大家捧场。 ","date":"2024-06-11","objectID":"/posts/myblog41/:0:0","tags":["docker"],"title":"给docker拉取镜像添加代理","uri":"/posts/myblog41/"},{"categories":["教程"],"content":"1 创建配置文件夹和文件 创建一个Docker配置文件（如果不存在），并在其中添加代理设置。配置文件通常位于/etc/docker/目录下。 sudo mkdir /etc/systemd/system/docker.service.d/ sudo nano /etc/systemd/system/docker.service.d/http-proxy.conf ","date":"2024-06-11","objectID":"/posts/myblog41/:1:0","tags":["docker"],"title":"给docker拉取镜像添加代理","uri":"/posts/myblog41/"},{"categories":["教程"],"content":"2 在打开的文件中添加以下内容 按自己的实际修改 “your_proxy_server” 和 “proxy_port” 替换为实际的代理服务器和端口号。 [Service] Environment=\"HTTP_PROXY=http://your_proxy_server:proxy_port\" Environment=\"HTTPS_PROXY=http://your_proxy_server:proxy_port\" Environment=\"NO_PROXY=localhost,127.0.0.1\" ","date":"2024-06-11","objectID":"/posts/myblog41/:2:0","tags":["docker"],"title":"给docker拉取镜像添加代理","uri":"/posts/myblog41/"},{"categories":["教程"],"content":"3 重启docker sudo systemctl daemon-reload sudo systemctl restart docker ","date":"2024-06-11","objectID":"/posts/myblog41/:3:0","tags":["docker"],"title":"给docker拉取镜像添加代理","uri":"/posts/myblog41/"},{"categories":["教程"],"content":"4 验证代理设置是否生效 可以使用以下命令来检查docker是否正在使用代理 sudo docker info | grep -i proxy ","date":"2024-06-11","objectID":"/posts/myblog41/:4:0","tags":["docker"],"title":"给docker拉取镜像添加代理","uri":"/posts/myblog41/"},{"categories":["教程"],"content":"分享英国手机卡giffgaff申请免费邮寄到中国的方法","date":"2024-06-05","objectID":"/posts/myblog40/","tags":null,"title":"英国手机卡giffgaff申请教程","uri":"/posts/myblog40/"},{"categories":["教程"],"content":"分享英国手机卡giffgaff申请免费邮寄到中国的方法。 注意 注1、本期视频教程 注2、giffgaff官网 注3、如果收不到等不及急用可以联系我，闲鱼hsj4646767674 ","date":"2024-06-05","objectID":"/posts/myblog40/:0:0","tags":null,"title":"英国手机卡giffgaff申请教程","uri":"/posts/myblog40/"},{"categories":["教程"],"content":"1 点击申请链接申请 这个是我的邀请链接，激活后两个人都可以获得5英镑赠款，这样充值10英镑可得15英镑。 填写方式如下图所示，能不能收到邮编是最关键的，到中国邮政官网输入完整地址查询邮编。 收到的重点就是：镇及以下地址要明确+邮编要准确+电话要写上 1、怎么简化填写地址要看中国邮政能送到那里。这一片的都放快递柜，你写那栋楼号没有任何意义，写到小区就行了。就能送到村，你还写几组几街几号也没有任何意义，写到村就行了。 2、地址开头从县/区开始写就行了，毕竟省市后面都写了。村/小区这个层级一定要写的清楚，地址都是中国的邮递员肉眼分辨的，不放心可以拼音英语都申请一遍，方便快递员对比印证。 3、如果没收到也可以尝试在line1前面加上省和市，一个格子里加上市县镇村四层的的位置还是有的，再多可能会在邮件上打印不出来没位置了。可以在line1放省市区镇，line2放村，然后空格写上电话。这样电话在邮件上就不是第二行打头的了，不过邮递员应该还是能认出中国的电话的。地址太长也可以自己酌情考虑怎么放。 4、还是那句话，关键是邮编电话。 申请填写 地址填写示例：顺义区木林镇西沟村 #其实正着倒着也无所谓，正着倒这写我都收到了 line1：Shunyi District, Mulin Town, Xigou Village line2：136xxxxxxxx 拼音 #拼音的我也收到了，毕竟是邮递员读，填拼音也一样的。 line1：shun yi qu, mu lin zhen, xi gou cun line2：136xxxxxxxx ","date":"2024-06-05","objectID":"/posts/myblog40/:1:0","tags":null,"title":"英国手机卡giffgaff申请教程","uri":"/posts/myblog40/"},{"categories":["教程"],"content":"2 收到货后激活 我们可以拨打11185让中国邮政帮我们查询邮编的揽投部，让他们帮忙留意一下，我从申请到收到要16天，过半个月请邮递员帮忙留意都来得及，激活的教程有很多，我就不详细说了分享几篇如下。 激活教程1使用万事达和维萨信用卡激活 激活教程2使用淘宝购买10英镑充值卡激活 ","date":"2024-06-05","objectID":"/posts/myblog40/:2:0","tags":null,"title":"英国手机卡giffgaff申请教程","uri":"/posts/myblog40/"},{"categories":["教程"],"content":"3 简单设置 ","date":"2024-06-05","objectID":"/posts/myblog40/:3:0","tags":null,"title":"英国手机卡giffgaff申请教程","uri":"/posts/myblog40/"},{"categories":["教程"],"content":"3.1 关闭语音信箱 因为不同国家的电话接通和挂断信令不同，挂断电话可能转接到语音信箱导致收费，拨号盘输入##002#然后按下拨号键，等待一会即提示语音信箱已关闭。我感觉可能是查话费指令，也可能是这个关语音信箱指令会扣费0.01英镑，而且账单上没有显示。 ","date":"2024-06-05","objectID":"/posts/myblog40/:3:1","tags":null,"title":"英国手机卡giffgaff申请教程","uri":"/posts/myblog40/"},{"categories":["教程"],"content":"3.2 保号 可以打开手机的流量漫游，访问一下纯文字的网页，或是看到流量的箭头动了几下就关上，这样可以0.01~0.2英镑不等实现保号，大大延长保号使用时间。 ","date":"2024-06-05","objectID":"/posts/myblog40/:3:2","tags":null,"title":"英国手机卡giffgaff申请教程","uri":"/posts/myblog40/"},{"categories":["教程"],"content":"3.3 VoLTE和WIFI calling(VoWIFI) giffgaff即将支持VoLTE和WIFI calling，其中WiFi calling只支持在英国本土启用，VoLTE支持英国本土和在外国漫游时启用。 ","date":"2024-06-05","objectID":"/posts/myblog40/:3:3","tags":null,"title":"英国手机卡giffgaff申请教程","uri":"/posts/myblog40/"},{"categories":["教程"],"content":"3.4 呼叫限制 拨打电话提示呼叫限制需要手动切换漫游到中国移动信号。可能是因为漫游中国联通4g，而目前漫游到联通4g又没有volte，也许在未来支持漫游volte后可以解决。 ","date":"2024-06-05","objectID":"/posts/myblog40/:3:4","tags":null,"title":"英国手机卡giffgaff申请教程","uri":"/posts/myblog40/"},{"categories":["教程"],"content":"这篇文章介绍了通过docker-compose部署homepage的方法","date":"2024-05-31","objectID":"/posts/myblog39/","tags":["docker"],"title":"通过docker-compose部署homepage","uri":"/posts/myblog39/"},{"categories":["教程"],"content":"这篇文章介绍了通过docker-compose部署homepage的方法 注意 前情提要：安装docker和docker-compose请看本篇教程 ","date":"2024-05-31","objectID":"/posts/myblog39/:0:0","tags":["docker"],"title":"通过docker-compose部署homepage","uri":"/posts/myblog39/"},{"categories":["教程"],"content":"1 创建文件夹 我们在自己习惯的地方，创建一个文件夹放置homepage服务的映射文件并进入这个文件文件夹。 mkdir homepage \u0026\u0026 cd homepage ","date":"2024-05-31","objectID":"/posts/myblog39/:1:0","tags":["docker"],"title":"通过docker-compose部署homepage","uri":"/posts/myblog39/"},{"categories":["教程"],"content":"2 创建docker-compose.yml文件 我们创建一个docker-compose.yml文件 sudo nano docker-compose.yml 文件中放入如下内容。 version: \"3.3\" services: homepage: image: ghcr.io/gethomepage/homepage:latest container_name: homepage ports: - 3000:3000 volumes: - ./icons:/app/public/icons - ./images:/app/public/images - ./config:/app/config # Make sure your local config directory exists - /var/run/docker.sock:/var/run/docker.sock # (optional) For docker integrations ","date":"2024-05-31","objectID":"/posts/myblog39/:2:0","tags":["docker"],"title":"通过docker-compose部署homepage","uri":"/posts/myblog39/"},{"categories":["教程"],"content":"3 启动容器 sudo docker-compose up -d ","date":"2024-05-31","objectID":"/posts/myblog39/:3:0","tags":["docker"],"title":"通过docker-compose部署homepage","uri":"/posts/myblog39/"},{"categories":["教程"],"content":"4 简单配置 我们访问ip:3000就可以进行查看了。 ","date":"2024-05-31","objectID":"/posts/myblog39/:4:0","tags":["docker"],"title":"通过docker-compose部署homepage","uri":"/posts/myblog39/"},{"categories":["教程"],"content":"4.1 按照官网教程进行配置 我们打开官网的配置教程页面，按照教程耐心的配置。 我的配置示例。 停止容器 sudo docker-compose down 删除镜像 sudo docker rmi homepage:latest 更新webssh容器到docker-compose.yml的保存位置即homepage文件夹内，先sudo docker-compose down停止容器，再删除镜像，然后启动容器sudo docker-compose up -d，homepage容器即完成更新。 ","date":"2024-05-31","objectID":"/posts/myblog39/:4:1","tags":["docker"],"title":"通过docker-compose部署homepage","uri":"/posts/myblog39/"},{"categories":["教程"],"content":"这篇文章介绍了安装Ubuntu和Windows双系统的方法","date":"2024-04-17","objectID":"/posts/myblog38/","tags":["linux"],"title":"Ubuntu安装教程","uri":"/posts/myblog38/"},{"categories":["教程"],"content":"这篇文章介绍了安装Ubuntu和Windows双系统的方法 注意 注1、谢谢大家捧场。 ","date":"2024-04-17","objectID":"/posts/myblog38/:0:0","tags":["linux"],"title":"Ubuntu安装教程","uri":"/posts/myblog38/"},{"categories":["教程"],"content":"1 制作启动U盘 ","date":"2024-04-17","objectID":"/posts/myblog38/:1:0","tags":["linux"],"title":"Ubuntu安装教程","uri":"/posts/myblog38/"},{"categories":["教程"],"content":"1.1 下载Ventoy U盘启动工具 我们事先准备一个8G空间以上的U盘，第一次制作Ventoy启动U盘需要格式化整个U盘，以后就不需要了。我们从Ventoy下载地址进行下载。 ","date":"2024-04-17","objectID":"/posts/myblog38/:1:1","tags":["linux"],"title":"Ubuntu安装教程","uri":"/posts/myblog38/"},{"categories":["教程"],"content":"1.2 下载Ubuntu镜像 我们从Ubuntu官网下载Ubuntu镜像，并放入U盘ISO文件夹中。 ","date":"2024-04-17","objectID":"/posts/myblog38/:1:2","tags":["linux"],"title":"Ubuntu安装教程","uri":"/posts/myblog38/"},{"categories":["教程"],"content":"2 安装完的简单设置 ","date":"2024-04-17","objectID":"/posts/myblog38/:2:0","tags":["linux"],"title":"Ubuntu安装教程","uri":"/posts/myblog38/"},{"categories":["教程"],"content":"2.1 设置root密码 sudo passwd root ","date":"2024-04-17","objectID":"/posts/myblog38/:2:1","tags":["linux"],"title":"Ubuntu安装教程","uri":"/posts/myblog38/"},{"categories":["教程"],"content":"2.2 设置输入法并卸载ibus sudo apt purge ibus ","date":"2024-04-17","objectID":"/posts/myblog38/:2:2","tags":["linux"],"title":"Ubuntu安装教程","uri":"/posts/myblog38/"},{"categories":["教程"],"content":"2.3 设置grub启动时间 sudo nano /etc/default/grub ","date":"2024-04-17","objectID":"/posts/myblog38/:2:3","tags":["linux"],"title":"Ubuntu安装教程","uri":"/posts/myblog38/"},{"categories":["教程"],"content":"2.4 设置侧栏不显示卷 ","date":"2024-04-17","objectID":"/posts/myblog38/:2:4","tags":["linux"],"title":"Ubuntu安装教程","uri":"/posts/myblog38/"},{"categories":["教程"],"content":"2.5 设置文件夹为英语 ","date":"2024-04-17","objectID":"/posts/myblog38/:2:5","tags":["linux"],"title":"Ubuntu安装教程","uri":"/posts/myblog38/"},{"categories":["教程"],"content":"2.6 设置开机直接登陆 ","date":"2024-04-17","objectID":"/posts/myblog38/:2:6","tags":["linux"],"title":"Ubuntu安装教程","uri":"/posts/myblog38/"},{"categories":["教程"],"content":"3 卸载snap 以下是我摘抄关于卸载snap的文章的缝合，原文链接1，原文链接2，感谢Linux中国和鳳舞酒天。 ","date":"2024-04-17","objectID":"/posts/myblog38/:3:0","tags":["linux"],"title":"Ubuntu安装教程","uri":"/posts/myblog38/"},{"categories":["教程"],"content":"3.1 展示已安装的snap包 snap list ","date":"2024-04-17","objectID":"/posts/myblog38/:3:1","tags":["linux"],"title":"Ubuntu安装教程","uri":"/posts/myblog38/"},{"categories":["教程"],"content":"3.2 按照以下的顺序卸载 Snap 软件 sudo snap remove --purge firefox sudo snap remove --purge snap-store sudo snap remove --purge gnome-42-2204 sudo snap remove --purge firmware-updater sudo snap remove --purge gtk-common-themes sudo snap remove --purge snapd-desktop-integration sudo snap remove --purge bare sudo snap remove --purge core22 sudo snap remove --purge snapd ","date":"2024-04-17","objectID":"/posts/myblog38/:3:2","tags":["linux"],"title":"Ubuntu安装教程","uri":"/posts/myblog38/"},{"categories":["教程"],"content":"3.3 通过 apt 命令卸载 Snap 服务 sudo apt remove --autoremove snapd 删除snap工作目录 sudo rm -rf /var/cache/snapd sudo rm -rf ~/snap ","date":"2024-04-17","objectID":"/posts/myblog38/:3:3","tags":["linux"],"title":"Ubuntu安装教程","uri":"/posts/myblog38/"},{"categories":["教程"],"content":"3.4 创建一个配置文件 nosnap.pref 禁止自动安装 Snap 服务 sudo nano /etc/apt/preferences.d/nosnap.pref 文件中粘贴一下内容并保存 Package: snapd Pin: release a=* Pin-Priority: -10 然后运行如下命令 sudo apt update ","date":"2024-04-17","objectID":"/posts/myblog38/:3:4","tags":["linux"],"title":"Ubuntu安装教程","uri":"/posts/myblog38/"},{"categories":["教程"],"content":"3.5 安装apt版gnome应用商店[选作] sudo apt install --install-suggests gnome-software ","date":"2024-04-17","objectID":"/posts/myblog38/:3:5","tags":["linux"],"title":"Ubuntu安装教程","uri":"/posts/myblog38/"},{"categories":["教程"],"content":"3.6 安装apt版火狐浏览器[选作]官方链接 创建一个保存 APT 库密钥的目录 sudo install -d -m 0755 /etc/apt/keyrings 导入 Mozilla APT 密钥环 wget -q https://packages.mozilla.org/apt/repo-signing-key.gpg -O- | sudo tee /etc/apt/keyrings/packages.mozilla.org.asc \u003e /dev/null 把 Mozilla APT 库添加到源列表中 echo \"deb [signed-by=/etc/apt/keyrings/packages.mozilla.org.asc] https://packages.mozilla.org/apt mozilla main\" | sudo tee -a /etc/apt/sources.list.d/mozilla.list \u003e /dev/null 配置 APT 优先使用 Mozilla 库中的包 echo ' Package: * Pin: origin packages.mozilla.org Pin-Priority: 1000 ' | sudo tee /etc/apt/preferences.d/mozilla 更新软件列表并安装 Firefox .deb 包 sudo apt-get update \u0026\u0026 sudo apt-get install firefox 安装 Firefox 简体中文语言包 sudo apt-get install firefox-l10n-zh-cn ","date":"2024-04-17","objectID":"/posts/myblog38/:3:6","tags":["linux"],"title":"Ubuntu安装教程","uri":"/posts/myblog38/"},{"categories":["教程"],"content":"3.7 恢复snap软件包 如果你改变想法，移除该设置文件，并通过以下命令再次启动安装程序。 sudo rm /etc/apt/preferences.d/nosnap.pref sudo apt update \u0026\u0026 sudo apt upgrade sudo snap install snap-store sudo apt install firefox ","date":"2024-04-17","objectID":"/posts/myblog38/:3:7","tags":["linux"],"title":"Ubuntu安装教程","uri":"/posts/myblog38/"},{"categories":["教程"],"content":"这篇文章介绍了屏蔽小米电视开机广告的方法","date":"2024-03-29","objectID":"/posts/myblog37/","tags":null,"title":"屏蔽小米电视开机广告","uri":"/posts/myblog37/"},{"categories":["教程"],"content":"这篇文章介绍了屏蔽小米电视开机广告的方法 注意 注1、原作者GitHub链接。 ","date":"2024-03-29","objectID":"/posts/myblog37/:0:0","tags":null,"title":"屏蔽小米电视开机广告","uri":"/posts/myblog37/"},{"categories":["教程"],"content":"1 在路由器添加黑名单 我们开启路由器的网页黑名单功能，并把以下网址添加到黑名单，当然也可以用改host的方法，我习惯添加黑名单的方法。 127.0.0.1 ad.mi.com 127.0.0.1 api.ad.xiaomi.com 127.0.0.1 ad1.xiaomi.com 127.0.0.1 tat.pandora.xiaomi.com 127.0.0.1 t7z.cupid.ptqy.gitv.tv 127.0.0.1 video.market.xiaomi.com 127.0.0.1 sv-video.play.aiseet.atianqi.com 127.0.0.1 mobaliyun.res.mgtv.com 127.0.0.1 pl.cp31.ott.cibntv.net 127.0.0.1 vali-ugc.cp31.ott.cibntv.net 我添加啊黑名单后，将电视内miad文件夹缓存的广告都删了，小米电视的开机广告就没有了。 ","date":"2024-03-29","objectID":"/posts/myblog37/:1:0","tags":null,"title":"屏蔽小米电视开机广告","uri":"/posts/myblog37/"},{"categories":["教程"],"content":"2 结语 希望能帮助到大家。 ","date":"2024-03-29","objectID":"/posts/myblog37/:2:0","tags":null,"title":"屏蔽小米电视开机广告","uri":"/posts/myblog37/"},{"categories":["教程"],"content":"这篇文章介绍了使用ssh公钥连接设备的方法","date":"2024-03-29","objectID":"/posts/myblog36/","tags":["linux"],"title":"通过公钥进行ssh连接","uri":"/posts/myblog36/"},{"categories":["教程"],"content":"这篇文章介绍了使用ssh公钥连接设备的方法 注意 注1、建议使用1.2法二在本地生成密钥。 ","date":"2024-03-29","objectID":"/posts/myblog36/:0:0","tags":["linux"],"title":"通过公钥进行ssh连接","uri":"/posts/myblog36/"},{"categories":["教程"],"content":"1 生成密钥 ","date":"2024-03-29","objectID":"/posts/myblog36/:1:0","tags":["linux"],"title":"通过公钥进行ssh连接","uri":"/posts/myblog36/"},{"categories":["教程"],"content":"1.1 法一：在设备生成密钥[不推荐] 我们先正常的ssh连接到设备，输入如下命令，然后一直回车，生成密钥。 ssh-keygen -m PEM -t rsa -b 4096 然后我们进入自己家目录下的.ssh文件夹。 cd .ssh 如果输入ls命令可以看到生成了两个文件，id_rsa和id_rsa.pub，id_rsa.pub就是我们的公钥文件，我们用如下命令将公钥保存在验证文件中。 cat id_rsa.pub \u003e\u003e authorized_keys 然后我们分别授予验证文件和.ssh文件夹对应的读写权限 chmod 600 authorized_keys chmod 700 ~/.ssh 然后我们将私钥文件id_rsa下载到本地，用我们的ssh工具导入私钥文件，进行连接尝试。 ","date":"2024-03-29","objectID":"/posts/myblog36/:1:1","tags":["linux"],"title":"通过公钥进行ssh连接","uri":"/posts/myblog36/"},{"categories":["教程"],"content":"1.2 法二：在本地生成密钥 我们Win+R再打开的界面输入cmd回车，然后输入如下命令，一直回车生成密钥。 ssh-keygen -m PEM -t rsa -b 4096 然后我们正常ssh连接到设备，然后创建并进入.ssh文件夹 mkdir -p .ssh \u0026\u0026 cd .ssh 然后创建authorized_keys验证文件 nano authorized_keys 在c盘下的用户文件夹，自己用户名的文件夹，.ssh文件夹，将里面的id_rsa.pub文件右键打开方式，使用记事本打开，将全部内容复制到authorized_keys内，并保存退出。 然后我们分别授予验证文件和.ssh文件夹对应的读写权限 chmod 600 authorized_keys chmod 700 ~/.ssh 然后我们可以直接断开连接，然后ssh到设备查看是否需要密码，如已经不再需要密码直接连接，公钥即已经配置好了。 我们也可以在任意支持ssh连接的软件导入.ssh文件夹内的私钥文件id_rsa即可实现直接连接。 ","date":"2024-03-29","objectID":"/posts/myblog36/:1:2","tags":["linux"],"title":"通过公钥进行ssh连接","uri":"/posts/myblog36/"},{"categories":["教程"],"content":"2 关闭ssh的账号密码登陆 我们尝试公钥连接成功后，我们关闭ssh的密码连接，我们打开ssh的配置文件 sudo nano /etc/ssh/sshd_config 我们找到#PasswordAuthentication yes这行，将其修改为 PasswordAuthentication no 然后保存退出，重启sshd配置生效 sudo service sshd restart ","date":"2024-03-29","objectID":"/posts/myblog36/:2:0","tags":["linux"],"title":"通过公钥进行ssh连接","uri":"/posts/myblog36/"},{"categories":["教程"],"content":"3 结语 到此我们要保存好自己的私钥文件，导入私钥文件后即可链接到ssh。 ","date":"2024-03-29","objectID":"/posts/myblog36/:3:0","tags":["linux"],"title":"通过公钥进行ssh连接","uri":"/posts/myblog36/"},{"categories":["软件"],"content":"这篇文章介绍了idm下载器的安装与激活方法","date":"2024-02-26","objectID":"/posts/myblog35/","tags":["windows","软件"],"title":"idm下载器安装与激活","uri":"/posts/myblog35/"},{"categories":["软件"],"content":"这篇文章介绍了idm下载器的安装与激活方法 注意 注1、开发者以停止维护此激活脚本，此篇文章的方法已经无效！！！ ","date":"2024-02-26","objectID":"/posts/myblog35/:0:0","tags":["windows","软件"],"title":"idm下载器安装与激活","uri":"/posts/myblog35/"},{"categories":["软件"],"content":"1 下载idm 我们在IDM官网，点击中间绿色的按钮Try IDM 30-days free trial就可以下载了，然后按部就班的安装。 ","date":"2024-02-26","objectID":"/posts/myblog35/:1:0","tags":["windows","软件"],"title":"idm下载器安装与激活","uri":"/posts/myblog35/"},{"categories":["软件"],"content":"2 下载激活脚本 我们在GitHub下载，或者到我的网盘，下载IAS.cmd，下载好后将文件拖动到桌面，然后右键打开，选择[2] Freeze Trial，等待出现如下内容。 “The IDM 30 days trial period is successfully freezed for Lifetime.” “IDM 30天的试用期已成功冻结终身\" “If IDM is showing a popup to register, reinstall IDM.” “如果IDM显示要注册的弹出窗口，请重新安装IDM” “Press any key to return…” “按任意键退出…” 然后我们就可以退出脚本了。 ","date":"2024-02-26","objectID":"/posts/myblog35/:2:0","tags":["windows","软件"],"title":"idm下载器安装与激活","uri":"/posts/myblog35/"},{"categories":["软件"],"content":"3 结语 到此idm就安装好了浏览器插件可以直接到edge和火狐的插件商店安装就可以了。 ","date":"2024-02-26","objectID":"/posts/myblog35/:3:0","tags":["windows","软件"],"title":"idm下载器安装与激活","uri":"/posts/myblog35/"},{"categories":["游戏"],"content":"这篇文章介绍了整合yuzu模拟器、keys和固件的方法，并提供了整合包","date":"2024-02-19","objectID":"/posts/myblog34/","tags":["windows","游戏"],"title":"yuzu模拟器整合包","uri":"/posts/myblog34/"},{"categories":["游戏"],"content":"这篇文章介绍了整合yuzu模拟器、keys和固件的方法，并提供了整合包。 注意 注1、yuzu模拟器已经停止更新，我已经在注2提供了最后一个版本4176的整合包。 注2、如果无法上网可以下载我整合好keys和固件的整合包 ","date":"2024-02-19","objectID":"/posts/myblog34/:0:0","tags":["windows","游戏"],"title":"yuzu模拟器整合包","uri":"/posts/myblog34/"},{"categories":["游戏"],"content":"1 下载yuzu模拟器 我们在大神提供的yuzu下载地址，下载最新版并解压，在yuzu.exe同文件夹下创建一个user文件夹，然后打开yuzu.exe，会提示我们缺失keys和固件，一定要打开，会自动帮我们创建一些目录，也可将yuzu.exe发送到桌面快捷方式，以后就可以从桌面快捷方式打开了。 ","date":"2024-02-19","objectID":"/posts/myblog34/:1:0","tags":["windows","游戏"],"title":"yuzu模拟器整合包","uri":"/posts/myblog34/"},{"categories":["游戏"],"content":"2 下载固件 我们在GitHub下载THZoria大神提供的固件，下载最新版并解压，将文件夹内的所有文件复制到刚刚创建的\\user\\nand\\system\\Contents\\registered文件夹下。 ","date":"2024-02-19","objectID":"/posts/myblog34/:2:0","tags":["windows","游戏"],"title":"yuzu模拟器整合包","uri":"/posts/myblog34/"},{"categories":["游戏"],"content":"3 下载keys 我们下载GitHubPrincessAkira大神提供的keys，页面中的链接需要base64解密，解密出的链接是谷歌云盘的 或者下载百度贴吧文无大神提供的keys，密码：7257 下载固件版本对应的keys，将文件夹内的文件复制到刚刚创建的\\user\\keys文件夹下。 ","date":"2024-02-19","objectID":"/posts/myblog34/:3:0","tags":["windows","游戏"],"title":"yuzu模拟器整合包","uri":"/posts/myblog34/"},{"categories":["游戏"],"content":"4 结语 到此yuzu模拟器，固件和keys就都放好了。下面就可以下载游戏导入游玩了，建议将模拟器和游戏放在固态硬盘。 ","date":"2024-02-19","objectID":"/posts/myblog34/:4:0","tags":["windows","游戏"],"title":"yuzu模拟器整合包","uri":"/posts/myblog34/"},{"categories":["教程"],"content":"这篇文章介绍了通过docker-compose部署ginx文件下载服务的方法","date":"2024-02-14","objectID":"/posts/myblog33/","tags":["docker"],"title":"通过docker-compose部署nginx文件下载服务","uri":"/posts/myblog33/"},{"categories":["教程"],"content":"这篇文章介绍了通过docker-compose部署ginx文件下载服务的方法 注意 前情提要：安装docker和docker-compose请看本篇教程 注1、nginx docker image ","date":"2024-02-14","objectID":"/posts/myblog33/:0:0","tags":["docker"],"title":"通过docker-compose部署nginx文件下载服务","uri":"/posts/myblog33/"},{"categories":["教程"],"content":"1 创建文件夹 我们在自己习惯的地方，创建一个文件夹放置nginx文件下载服务的映射文件。 mkdir downng 进入这个文件文件夹。 cd downng ","date":"2024-02-14","objectID":"/posts/myblog33/:1:0","tags":["docker"],"title":"通过docker-compose部署nginx文件下载服务","uri":"/posts/myblog33/"},{"categories":["教程"],"content":"2 在文件夹内创建default.conf文件 我们创建一个default.conf文件 nano default.conf 文件中放入如下内容，这个限制下载速度在电脑浏览器有用，在手机浏览器又没用，大家可以自己试试。 server { listen 80; listen [::]:80; server_name localhost; location / { root /wenjian; autoindex on; # 显示目录 autoindex_exact_size off; # 显示文件大小 autoindex_localtime on; # 显示文件时间 charset utf-8; # 防止中文乱码 limit_rate 1m; # 限制下载速度为1MB sendfile on; # 开启零复制文件传输功能 directio 5m; # 当文件大于5MB时以直接读取磁盘的方式读取文件 index index.html index.htm; } } ","date":"2024-02-14","objectID":"/posts/myblog33/:2:0","tags":["docker"],"title":"通过docker-compose部署nginx文件下载服务","uri":"/posts/myblog33/"},{"categories":["教程"],"content":"3 创建docker-compose.yml文件 我们创建一个docker-compose.yml文件 sudo nano docker-compose.yml 文件中放入如下内容，/home/hsj/Downloads处修改为自己要分享的文件夹的绝对路径。 version: '3.9' services: download: image: nginx container_name: downnginx restart: always environment: - NGINX_PORT=80 - TZ=Asia/Shanghai ports: - 9090:80 volumes: - ./default.conf:/etc/nginx/conf.d/default.conf - /home/hsj/Downloads:/wenjian ","date":"2024-02-14","objectID":"/posts/myblog33/:3:0","tags":["docker"],"title":"通过docker-compose部署nginx文件下载服务","uri":"/posts/myblog33/"},{"categories":["教程"],"content":"4 启动容器 sudo docker-compose up -d ","date":"2024-02-14","objectID":"/posts/myblog33/:4:0","tags":["docker"],"title":"通过docker-compose部署nginx文件下载服务","uri":"/posts/myblog33/"},{"categories":["教程"],"content":"5 简单配置 我们访问ip:9090就可以进行查看了。 停止容器 sudo docker-compose down 删除的话，只要在停止容器后删除整个downng文件夹就可以了。 ","date":"2024-02-14","objectID":"/posts/myblog33/:5:0","tags":["docker"],"title":"通过docker-compose部署nginx文件下载服务","uri":"/posts/myblog33/"},{"categories":["教程"],"content":"这篇文章介绍vm虚拟机安装debian的gnome桌面版后的简单设置","date":"2024-02-12","objectID":"/posts/myblog32/","tags":["debian"],"title":"vm虚拟机安装debian的gnome桌面版后的简单设置","uri":"/posts/myblog32/"},{"categories":["教程"],"content":"这篇文章介绍了安装debian的gnome桌面版后的简单设置 ","date":"2024-02-12","objectID":"/posts/myblog32/:0:0","tags":["debian"],"title":"vm虚拟机安装debian的gnome桌面版后的简单设置","uri":"/posts/myblog32/"},{"categories":["教程"],"content":"1 安装时不要设置root密码 安装完成后可以再设置 sudo passwd root ","date":"2024-02-12","objectID":"/posts/myblog32/:1:0","tags":["debian"],"title":"vm虚拟机安装debian的gnome桌面版后的简单设置","uri":"/posts/myblog32/"},{"categories":["教程"],"content":"2 添加自定义快捷键打开终端 terminal #名称 gnome-terminal #命令 ctrl+alt+t #快捷键 ","date":"2024-02-12","objectID":"/posts/myblog32/:2:0","tags":["debian"],"title":"vm虚拟机安装debian的gnome桌面版后的简单设置","uri":"/posts/myblog32/"},{"categories":["教程"],"content":"3 换源 1、北京外国语大学镜像站帮助页面 2、清华源帮助页面 3、中科大源帮助页面 ","date":"2024-02-12","objectID":"/posts/myblog32/:3:0","tags":["debian"],"title":"vm虚拟机安装debian的gnome桌面版后的简单设置","uri":"/posts/myblog32/"},{"categories":["教程"],"content":"4 修改grub等待时间 sudo nano /etc/default/grub 修改GRUB_TIMEOUT=1 sudo update-grub ","date":"2024-02-12","objectID":"/posts/myblog32/:4:0","tags":["debian"],"title":"vm虚拟机安装debian的gnome桌面版后的简单设置","uri":"/posts/myblog32/"},{"categories":["教程"],"content":"5 安装开源vm驱动 sudo apt install open-vm-tools ","date":"2024-02-12","objectID":"/posts/myblog32/:5:0","tags":["debian"],"title":"vm虚拟机安装debian的gnome桌面版后的简单设置","uri":"/posts/myblog32/"},{"categories":["教程"],"content":"这篇文章介绍了开启ufw防火墙并进行简单的配置","date":"2024-02-12","objectID":"/posts/myblog30/","tags":["docker","linux"],"title":"开启ufw防火墙并进行配置","uri":"/posts/myblog30/"},{"categories":["教程"],"content":"这篇文章介绍了开启ufw防火墙并进行简单的配置 注意 注1、bridge桥接模式部署的docker容器ufw无法管理，host模式可以管理 注2、为我的错误认识，其实没有影响 注3、本期视频教程 ","date":"2024-02-12","objectID":"/posts/myblog30/:0:0","tags":["docker","linux"],"title":"开启ufw防火墙并进行配置","uri":"/posts/myblog30/"},{"categories":["教程"],"content":"1 安装ufw防护墙 sudo apt install ufw ","date":"2024-02-12","objectID":"/posts/myblog30/:1:0","tags":["docker","linux"],"title":"开启ufw防火墙并进行配置","uri":"/posts/myblog30/"},{"categories":["教程"],"content":"2 配置防火墙 ","date":"2024-02-12","objectID":"/posts/myblog30/:2:0","tags":["docker","linux"],"title":"开启ufw防火墙并进行配置","uri":"/posts/myblog30/"},{"categories":["教程"],"content":"2.1 查看当前配置 sudo ufw status verbose ","date":"2024-02-12","objectID":"/posts/myblog30/:2:1","tags":["docker","linux"],"title":"开启ufw防火墙并进行配置","uri":"/posts/myblog30/"},{"categories":["教程"],"content":"2.2 打开默认设置 sudo ufw default allow outgoing sudo ufw default deny incoming ","date":"2024-02-12","objectID":"/posts/myblog30/:2:2","tags":["docker","linux"],"title":"开启ufw防火墙并进行配置","uri":"/posts/myblog30/"},{"categories":["教程"],"content":"2.3 打开局域网访问 允许局域网址为192.168.1.X的设备访问 sudo ufw allow from 192.168.1.0/24 ","date":"2024-02-12","objectID":"/posts/myblog30/:2:3","tags":["docker","linux"],"title":"开启ufw防火墙并进行配置","uri":"/posts/myblog30/"},{"categories":["教程"],"content":"2.4 允许外网80和443端口 sudo ufw allow 80 #允许外网访问80端口 sudo ufw allow 443 #允许外网访问80端口 ","date":"2024-02-12","objectID":"/posts/myblog30/:2:4","tags":["docker","linux"],"title":"开启ufw防火墙并进行配置","uri":"/posts/myblog30/"},{"categories":["教程"],"content":"2.5 启动防火墙 sudo ufw enable ","date":"2024-02-12","objectID":"/posts/myblog30/:2:5","tags":["docker","linux"],"title":"开启ufw防火墙并进行配置","uri":"/posts/myblog30/"},{"categories":["教程"],"content":"3 ufw防火墙常用命令 sudo ufw version #查看版本信息 sudo ufw logging on #启用日志 sudo ufw logging off #禁用日志 sudo ufw enable #启用防火墙 sudo ufw disable #禁用防火墙 sudo ufw reload #重载防火墙 sudo ufw reset #重新设置防火墙 (注意：这将禁用UFW并删除之前定义的任何规则) sudo ufw status #查看防火墙状态 sudo ufw status verbose #查看防火墙策略 ","date":"2024-02-12","objectID":"/posts/myblog30/:3:0","tags":["docker","linux"],"title":"开启ufw防火墙并进行配置","uri":"/posts/myblog30/"},{"categories":["教程"],"content":"4 其他配置 ","date":"2024-02-12","objectID":"/posts/myblog30/:4:0","tags":["docker","linux"],"title":"开启ufw防火墙并进行配置","uri":"/posts/myblog30/"},{"categories":["教程"],"content":"4.1 放行与拒绝 sudo ufw allow 80 #放行80端口 sudo ufw deny 80 #拒绝80端口 ","date":"2024-02-12","objectID":"/posts/myblog30/:4:1","tags":["docker","linux"],"title":"开启ufw防火墙并进行配置","uri":"/posts/myblog30/"},{"categories":["教程"],"content":"4.2 删除端口规则 sudo ufw delete allow 80 #删除放行80端口 sudo ufw delete deny 80 #删除拒绝80端口 ","date":"2024-02-12","objectID":"/posts/myblog30/:4:2","tags":["docker","linux"],"title":"开启ufw防火墙并进行配置","uri":"/posts/myblog30/"},{"categories":["教程"],"content":"4.3 带编号展示规则 sudo ufw status numbered ","date":"2024-02-12","objectID":"/posts/myblog30/:4:3","tags":["docker","linux"],"title":"开启ufw防火墙并进行配置","uri":"/posts/myblog30/"},{"categories":["教程"],"content":"4.4 删除编号为1的规则 sudo ufw delete 1 ","date":"2024-02-12","objectID":"/posts/myblog30/:4:4","tags":["docker","linux"],"title":"开启ufw防火墙并进行配置","uri":"/posts/myblog30/"},{"categories":["教程"],"content":"4.5 放行指定tcp规则 不指定规则，默认tcp与udp都放行 sudo ufw allow 80/tcp #放行80端口tcp sudo ufw allow 443/tcp #放行443端口tcp ","date":"2024-02-12","objectID":"/posts/myblog30/:4:5","tags":["docker","linux"],"title":"开启ufw防火墙并进行配置","uri":"/posts/myblog30/"},{"categories":["教程"],"content":"4.6 放行指定的udp规则 sudo ufw allow 6881/udp #放行6881端口udp ","date":"2024-02-12","objectID":"/posts/myblog30/:4:6","tags":["docker","linux"],"title":"开启ufw防火墙并进行配置","uri":"/posts/myblog30/"},{"categories":["教程"],"content":"4.7 放行应用默认端口 sudo ufw allow ssh #放行ssh的默认端口22 sudo ufw allow http #放行http默认端口80 ","date":"2024-02-12","objectID":"/posts/myblog30/:4:7","tags":["docker","linux"],"title":"开启ufw防火墙并进行配置","uri":"/posts/myblog30/"},{"categories":["教程"],"content":"4.8 开放一定范围端口 如下开放9000到9002的端口规则，指定端口范围时，必须指定规则应适用的协议tcp或udp sudo ufw allow 9000:9002/tcp sudo ufw allow 9000:9002/udp ","date":"2024-02-12","objectID":"/posts/myblog30/:4:8","tags":["docker","linux"],"title":"开启ufw防火墙并进行配置","uri":"/posts/myblog30/"},{"categories":["教程"],"content":"4.9 允许ip访问 只允许或者拒绝某IP访问 sudo ufw allow from 192.168.1.2 #允许 sudo ufw deny from 192.168.1.2 #拒绝 允许或者拒绝指定IP范围的访问 sudo ufw allow from 192.168.1.0/24 #允许 sudo ufw deny from 192.168.1.0/24 #拒绝 指定IP地址允许或者拒绝特定的端口 sudo ufw allow from 192.168.1.2 to any port 80 #允许 sudo ufw deny from 192.168.1.2 to any port 80 #拒绝 指定IP地址允许或者拒绝特定的端口的规则 #允许 sudo ufw allow from 192.168.29.36 to any port 80 proto tcp sudo ufw allow from 192.168.29.36 to any port 80 proto udp #拒绝 sudo ufw deny from 192.168.29.36 to any port 80 proto tcp sudo ufw deny from 192.168.29.36 to any port 80 proto udp ","date":"2024-02-12","objectID":"/posts/myblog30/:4:9","tags":["docker","linux"],"title":"开启ufw防火墙并进行配置","uri":"/posts/myblog30/"},{"categories":["教程"],"content":"4.10 允许从一个IP的53端口到另一个IP的53端口的udp协议 sudo ufw allow proto udp 192.168.0.1 port 53 to 192.168.0.2 port 53 ","date":"2024-02-12","objectID":"/posts/myblog30/:4:10","tags":["docker","linux"],"title":"开启ufw防火墙并进行配置","uri":"/posts/myblog30/"},{"categories":["教程"],"content":"分享通过通过docker-compose部署Nginx Proxy Manager并进行简单配置的方法","date":"2024-02-12","objectID":"/posts/myblog29/","tags":["docker"],"title":"通过docker-compose部署Nginx Proxy Manager并进行简单配置","uri":"/posts/myblog29/"},{"categories":["教程"],"content":"分享通过通过docker-compose部署Nginx Proxy Manager并进行简单配置的方法。 注意 前情提要：安装docker和docker-compose请看本篇教程 注1、Nginx Proxy Manager官网，Nginx Proxy Manager中文Docker Image ","date":"2024-02-12","objectID":"/posts/myblog29/:0:0","tags":["docker"],"title":"通过docker-compose部署Nginx Proxy Manager并进行简单配置","uri":"/posts/myblog29/"},{"categories":["教程"],"content":"1 创建文件夹 我们在自己习惯的地方，创建一个文件夹放置nginx-proxy-manager的映射文件。 mkdir npm 进入这个文件文件夹 cd npm ","date":"2024-02-12","objectID":"/posts/myblog29/:1:0","tags":["docker"],"title":"通过docker-compose部署Nginx Proxy Manager并进行简单配置","uri":"/posts/myblog29/"},{"categories":["教程"],"content":"2 创建docker-compose.yml文件 我们创建一个docker-compose.yml文件 sudo nano docker-compose.yml 文件中放入如下内容 version: '3.8' services: nginxpm: image: 'jc21/nginx-proxy-manager:latest' # image: 'chishin/nginx-proxy-manager-zh:latest' container_name: nginxpm restart: unless-stopped # network_mode: host ports: - '80:80' - '81:81' - '443:443' - '888:888' volumes: - ./data:/data - ./letsencrypt:/etc/letsencrypt ","date":"2024-02-12","objectID":"/posts/myblog29/:2:0","tags":["docker"],"title":"通过docker-compose部署Nginx Proxy Manager并进行简单配置","uri":"/posts/myblog29/"},{"categories":["教程"],"content":"3 启动容器 sudo docker-compose up -d ","date":"2024-02-12","objectID":"/posts/myblog29/:3:0","tags":["docker"],"title":"通过docker-compose部署Nginx Proxy Manager并进行简单配置","uri":"/posts/myblog29/"},{"categories":["教程"],"content":"4 简单配置 我们访问ip:81就可以进行进行简单的配置了，默认登陆邮箱admin@example.com，默认登陆密码changeme，登陆后会要求我们修改默认邮箱和密码。 停止容器 sudo docker-compose down 删除镜像 sudo docker rmi jc21/nginx-proxy-manager:latest #英文镜像删除命令 sudo docker rmi chishin/nginx-proxy-manager-zh:latest #中文镜像删除命令 更新nginx-proxy-manager容器到docker-compose.yml的保存位置即npm文件夹内，先sudo docker-compose down停止容器，再删除镜像，然后启动容器sudo docker-compose up -d，nginx-proxy-manager容器即完成更新。 删除的话，只要在停止容器后删除整个npm文件夹和镜像就可以了。 ","date":"2024-02-12","objectID":"/posts/myblog29/:4:0","tags":["docker"],"title":"通过docker-compose部署Nginx Proxy Manager并进行简单配置","uri":"/posts/myblog29/"},{"categories":["教程"],"content":"5 更多配置 以下配置涉及情况：只有一个设备同时部署了多个docker容器。多个服务，ddns-go和Nginx Proxy Manager全部部署在同一个设备。 ","date":"2024-02-12","objectID":"/posts/myblog29/:5:0","tags":["docker"],"title":"通过docker-compose部署Nginx Proxy Manager并进行简单配置","uri":"/posts/myblog29/"},{"categories":["教程"],"content":"5.1 反向代理 进行反向代理前要买好域名和做好dns解析，ddns我使用docker部署的ddns-go，其它‘购买域名’和’dns解析’我也是看这个视频学习的。 1、如果只有所有的服务都部署在一台设备上，尽量使用前面一个*的泛解析域名*.你购买的域名，如*.example.com，这样我们可以不必反复进行dns解析设置，只要在Nginx Proxy Manager设置反向代理就可以了。 2、部署在同一设备上的docker容器，ip地址可设置为172.17.0.1 反向代理 ","date":"2024-02-12","objectID":"/posts/myblog29/:5:1","tags":["docker"],"title":"通过docker-compose部署Nginx Proxy Manager并进行简单配置","uri":"/posts/myblog29/"},{"categories":["教程"],"content":"5.2 重定向 目标是将主域名重定向到指定的子域名，如将example.com重定向到blog.example.com实现访问主域名跳转到博客。 1、设置重定向前先要在dns提供商处将主域名解析到同一设备。 2、我们需要为主域名申请一个单独的ssl证书，如果使用泛解析域名相同证书，访问会提示证书错误，在浏览器点击忽略证书也可以，但不好，还得再点下忽略，失去重定向方便的意义了。 3、方案Scheme设置为auto，规则可以选301 重定向 ","date":"2024-02-12","objectID":"/posts/myblog29/:5:2","tags":["docker"],"title":"通过docker-compose部署Nginx Proxy Manager并进行简单配置","uri":"/posts/myblog29/"},{"categories":["教程"],"content":"5.3 端口转发 端口转发是在默认端口被封的情况下实现访问 1、首先在docker-compos.yml文件添加想要转发到的端口映射，如我上方添加的888端口，然后重启容器 2、一般https访问只要用到443端口就可以了，我们只转发一个443端口，ip设置为0.0.0.0，传入端口设置为888，转发端口设置为443。 3、然后我们便可再域名后添加端口进行访问，如blog.example.com:888 端口转发 ","date":"2024-02-12","objectID":"/posts/myblog29/:5:3","tags":["docker"],"title":"通过docker-compose部署Nginx Proxy Manager并进行简单配置","uri":"/posts/myblog29/"},{"categories":["教程"],"content":"这篇文章介绍了通过docker-compose部署ddns-go的方法","date":"2024-02-12","objectID":"/posts/myblog28/","tags":["docker"],"title":"通过docker-compose部署ddns-go","uri":"/posts/myblog28/"},{"categories":["教程"],"content":"这篇文章介绍了通过docker-compose部署ddns-go的方法 注意 前情提要：安装docker和docker-compose请看本篇教程 注1、ddns-go GitHub 注2、本期视频教程 注3、购买域名和设置dns 注4、查看和放开IPv6防火墙 ","date":"2024-02-12","objectID":"/posts/myblog28/:0:0","tags":["docker"],"title":"通过docker-compose部署ddns-go","uri":"/posts/myblog28/"},{"categories":["教程"],"content":"1 创建文件夹 我们在自己习惯的地方，创建一个文件夹放置ddns-go的映射文件。 mkdir ddns 进入这个文件文件夹。 cd ddns ","date":"2024-02-12","objectID":"/posts/myblog28/:1:0","tags":["docker"],"title":"通过docker-compose部署ddns-go","uri":"/posts/myblog28/"},{"categories":["教程"],"content":"2 创建docker-compose.yml文件 我们创建一个docker-compose.yml文件 sudo nano docker-compose.yml 文件中放入如下内容。 version: \"3.9\" services: ddns-go: image: jeessy/ddns-go:latest container_name: ddns-go restart: always network_mode: \"host\" volumes: - ./data:/root ","date":"2024-02-12","objectID":"/posts/myblog28/:2:0","tags":["docker"],"title":"通过docker-compose部署ddns-go","uri":"/posts/myblog28/"},{"categories":["教程"],"content":"3 启动容器 sudo docker-compose up -d ","date":"2024-02-12","objectID":"/posts/myblog28/:3:0","tags":["docker"],"title":"通过docker-compose部署ddns-go","uri":"/posts/myblog28/"},{"categories":["教程"],"content":"4 简单配置 我们访问ip:9876就可以进行配置了。 停止容器 sudo docker-compose down 删除镜像 sudo docker rmi jeessy/ddns-go:latest 更新ddns-go容器到docker-compose.yml的保存位置即ddns文件夹内，先sudo docker-compose down停止容器，再删除镜像，然后启动容器sudo docker-compose up -d，ddns-go容器即完成更新。 删除的话，只要在停止容器后删除整个ddns文件夹和镜像就可以了。 ","date":"2024-02-12","objectID":"/posts/myblog28/:4:0","tags":["docker"],"title":"通过docker-compose部署ddns-go","uri":"/posts/myblog28/"},{"categories":["教程"],"content":"这篇文章介绍了通过docker-compose部署hugo的方法","date":"2024-02-12","objectID":"/posts/myblog27/","tags":["docker"],"title":"通过docker-compose部署hugo静态博客(使用nginx)","uri":"/posts/myblog27/"},{"categories":["教程"],"content":"这篇文章介绍了通过docker-compose部署hugo的方法 注意 前情提要：安装docker和docker-compose请看本篇教程 注1、需提前准备好hugo静态文件 注2、本期视频教程 ","date":"2024-02-12","objectID":"/posts/myblog27/:0:0","tags":["docker"],"title":"通过docker-compose部署hugo静态博客(使用nginx)","uri":"/posts/myblog27/"},{"categories":["教程"],"content":"1 创建文件夹 我们在自己习惯的地方，创建一个文件夹放置hugo_nginx的映射文件。 mkdir hugonx 进入这个文件文件夹。 cd hugonx ","date":"2024-02-12","objectID":"/posts/myblog27/:1:0","tags":["docker"],"title":"通过docker-compose部署hugo静态博客(使用nginx)","uri":"/posts/myblog27/"},{"categories":["教程"],"content":"2 创建docker-compose.yml文件 我们创建一个docker-compose.yml文件 sudo nano docker-compose.yml 文件中放入如下内容，/hugo_blog/public处修改为自己博客的public绝对路径。 version: '3.9' services: hugoweb: image: nginx container_name: hugonx restart: always environment: # - NGINX_HOST=foobar.com - NGINX_PORT=80 ports: - 8090:80 volumes: # - ./templates:/etc/nginx/templates - /hugo_blog/public:/usr/share/nginx/html ","date":"2024-02-12","objectID":"/posts/myblog27/:2:0","tags":["docker"],"title":"通过docker-compose部署hugo静态博客(使用nginx)","uri":"/posts/myblog27/"},{"categories":["教程"],"content":"3 启动容器 sudo docker-compose up -d ","date":"2024-02-12","objectID":"/posts/myblog27/:3:0","tags":["docker"],"title":"通过docker-compose部署hugo静态博客(使用nginx)","uri":"/posts/myblog27/"},{"categories":["教程"],"content":"4 简单配置 我们访问ip:8090就可以进行浏览了。 停止容器 sudo docker-compose down 删除的话，只要在停止容器后删除整个hugonx文件夹就可以了。 ","date":"2024-02-12","objectID":"/posts/myblog27/:4:0","tags":["docker"],"title":"通过docker-compose部署hugo静态博客(使用nginx)","uri":"/posts/myblog27/"},{"categories":["教程"],"content":"这篇文章介绍了几个简单的Liunx常用压缩命令","date":"2024-02-12","objectID":"/posts/myblog26/","tags":["linux"],"title":"Liunx常用压缩命令","uri":"/posts/myblog26/"},{"categories":["教程"],"content":"这篇文章介绍了几个简单的Liunx常用压缩命令 ","date":"2024-02-12","objectID":"/posts/myblog26/:0:0","tags":["linux"],"title":"Liunx常用压缩命令","uri":"/posts/myblog26/"},{"categories":["教程"],"content":"1 gzip压缩 ","date":"2024-02-12","objectID":"/posts/myblog26/:1:0","tags":["linux"],"title":"Liunx常用压缩命令","uri":"/posts/myblog26/"},{"categories":["教程"],"content":"1.1 压缩 tar -zcvf 压缩包名字.tar.gz 要压缩的文件或文件夹 如 tar -zcvf npm.tar.gz npm ","date":"2024-02-12","objectID":"/posts/myblog26/:1:1","tags":["linux"],"title":"Liunx常用压缩命令","uri":"/posts/myblog26/"},{"categories":["教程"],"content":"1.2 解压到当前文件夹 tar -zxvf 压缩包名字.tar.gz 如 tar -zxvf npm.tar.gz ","date":"2024-02-12","objectID":"/posts/myblog26/:1:2","tags":["linux"],"title":"Liunx常用压缩命令","uri":"/posts/myblog26/"},{"categories":["教程"],"content":"2 bzip2压缩 ","date":"2024-02-12","objectID":"/posts/myblog26/:2:0","tags":["linux"],"title":"Liunx常用压缩命令","uri":"/posts/myblog26/"},{"categories":["教程"],"content":"2.1 压缩 tar -jcvf 压缩包名.tar.bz2 要压缩的文件或文件夹 ","date":"2024-02-12","objectID":"/posts/myblog26/:2:1","tags":["linux"],"title":"Liunx常用压缩命令","uri":"/posts/myblog26/"},{"categories":["教程"],"content":"2.2 解压到当前文件夹 tar -jxvf 压缩包名字.tar.bz2 ","date":"2024-02-12","objectID":"/posts/myblog26/:2:2","tags":["linux"],"title":"Liunx常用压缩命令","uri":"/posts/myblog26/"},{"categories":["教程"],"content":"3 zip压缩 ","date":"2024-02-12","objectID":"/posts/myblog26/:3:0","tags":["linux"],"title":"Liunx常用压缩命令","uri":"/posts/myblog26/"},{"categories":["教程"],"content":"3.1 压缩 zip 压缩包名.zip 要压缩的文件或文件夹 ","date":"2024-02-12","objectID":"/posts/myblog26/:3:1","tags":["linux"],"title":"Liunx常用压缩命令","uri":"/posts/myblog26/"},{"categories":["教程"],"content":"3.2 解压到当前文件夹 unzip 压缩包名.zip ","date":"2024-02-12","objectID":"/posts/myblog26/:3:2","tags":["linux"],"title":"Liunx常用压缩命令","uri":"/posts/myblog26/"},{"categories":["教程"],"content":"这篇文章介绍了通过docker-compose部署一个简单图床EasyImage2.0的方法","date":"2024-02-12","objectID":"/posts/myblog25/","tags":["docker"],"title":"通过docker-compose部署一个简单图床EasyImage2.0","uri":"/posts/myblog25/"},{"categories":["教程"],"content":"这篇文章介绍了通过docker-compose部署一个简单图床EasyImage2.0的方法 注意 前情提要：安装docker和docker-compose请看本篇教程 注1、EasyImages2.0 GitHub，EasyImages2.0 docker GitHub，EasyImages2.0文档 ","date":"2024-02-12","objectID":"/posts/myblog25/:0:0","tags":["docker"],"title":"通过docker-compose部署一个简单图床EasyImage2.0","uri":"/posts/myblog25/"},{"categories":["教程"],"content":"1 创建文件夹 我们在自己习惯的地方，创建一个文件夹放置easyimage的映射文件。 mkdir easyimage 进入这个文件文件夹。 cd easyimage ","date":"2024-02-12","objectID":"/posts/myblog25/:1:0","tags":["docker"],"title":"通过docker-compose部署一个简单图床EasyImage2.0","uri":"/posts/myblog25/"},{"categories":["教程"],"content":"2 创建docker-compose.yml文件 我们创建一个docker-compose.yml文件 sudo nano docker-compose.yml 文件中放入如下内容 version: '3.3' services: easyimage: image: ddsderek/easyimage:latest container_name: easyimage ports: - '8080:80' #左侧端口可自定义 environment: - TZ=Asia/Shanghai - PUID=1000 - PGID=1000 - DEBUG=false volumes: - ./config:/app/web/config - ./i:/app/web/i restart: unless-stopped ","date":"2024-02-12","objectID":"/posts/myblog25/:2:0","tags":["docker"],"title":"通过docker-compose部署一个简单图床EasyImage2.0","uri":"/posts/myblog25/"},{"categories":["教程"],"content":"3 启动容器 sudo docker-compose up -d ","date":"2024-02-12","objectID":"/posts/myblog25/:3:0","tags":["docker"],"title":"通过docker-compose部署一个简单图床EasyImage2.0","uri":"/posts/myblog25/"},{"categories":["教程"],"content":"4 简单配置 我们访问ip:8080就可以进行进行简单的配置了。 停止容器 sudo docker-compose down 删除镜像 sudo docker rmi ddsderek/easyimage:latest 更新easyimage容器到docker-compose.yml的保存位置即easyimage文件夹内，先sudo docker-compose down停止容器，再删除镜像，然后启动容器sudo docker-compose up -d，easyimage容器即完成更新。 ","date":"2024-02-12","objectID":"/posts/myblog25/:4:0","tags":["docker"],"title":"通过docker-compose部署一个简单图床EasyImage2.0","uri":"/posts/myblog25/"},{"categories":["教程"],"content":"这篇文章介绍了通过docker-compose部署webssh的方法","date":"2024-02-12","objectID":"/posts/myblog24/","tags":["docker"],"title":"通过docker-compose部署webssh","uri":"/posts/myblog24/"},{"categories":["教程"],"content":"这篇文章介绍了通过docker-compose部署webssh的方法 注意 前情提要：安装docker和docker-compose请看本篇教程 ","date":"2024-02-12","objectID":"/posts/myblog24/:0:0","tags":["docker"],"title":"通过docker-compose部署webssh","uri":"/posts/myblog24/"},{"categories":["教程"],"content":"1 创建文件夹 我们在自己习惯的地方，创建一个文件夹放置webssh的映射文件，复制全部命令粘贴回车。 mkdir webssh 进入这个文件文件夹。 cd webssh ","date":"2024-02-12","objectID":"/posts/myblog24/:1:0","tags":["docker"],"title":"通过docker-compose部署webssh","uri":"/posts/myblog24/"},{"categories":["教程"],"content":"2 创建docker-compose.yml文件 我们创建一个docker-compose.yml文件 sudo nano docker-compose.yml 文件中放入如下内容 version: '3.9' services: webssh: container_name: webssh image: jrohy/webssh:latest restart: always environment: - PUID=0 - PGID=0 - TZ=Asia/Shanghai ports: - '5032:5032' #前面的端口可以改成自己喜欢的 ","date":"2024-02-12","objectID":"/posts/myblog24/:2:0","tags":["docker"],"title":"通过docker-compose部署webssh","uri":"/posts/myblog24/"},{"categories":["教程"],"content":"3 启动容器 sudo docker-compose up -d ","date":"2024-02-12","objectID":"/posts/myblog24/:3:0","tags":["docker"],"title":"通过docker-compose部署webssh","uri":"/posts/myblog24/"},{"categories":["教程"],"content":"4 简单配置 我们配置webssh容器使用的端口号是5032，我们访问ip:5032使用webssh。 停止容器 sudo docker-compose down 删除镜像 sudo docker rmi jrohy/webssh:latest 更新webssh容器到docker-compose.yml的保存位置即webssh文件夹内，先sudo docker-compose down停止容器，再删除镜像，然后启动容器sudo docker-compose up -d，webssh容器即完成更新。 ","date":"2024-02-12","objectID":"/posts/myblog24/:4:0","tags":["docker"],"title":"通过docker-compose部署webssh","uri":"/posts/myblog24/"},{"categories":["教程"],"content":"这篇文章介绍了通过docker-compose部署qbittorrent的方法","date":"2024-02-12","objectID":"/posts/myblog23/","tags":["docker"],"title":"通过docker-compose部署qbittorrent","uri":"/posts/myblog23/"},{"categories":["教程"],"content":"这篇文章介绍了通过docker-compose部署qbittorrent的方法 注意 前情提要：安装docker和docker-compose请看本篇教程 ","date":"2024-02-12","objectID":"/posts/myblog23/:0:0","tags":["docker"],"title":"通过docker-compose部署qbittorrent","uri":"/posts/myblog23/"},{"categories":["教程"],"content":"1 创建文件夹 我们在自己习惯的地方，创建一个文件夹放置qbittorrent的映射文件 mkdir qbittorrent 进入这个文件文件夹。 cd qbittorrent ","date":"2024-02-12","objectID":"/posts/myblog23/:1:0","tags":["docker"],"title":"通过docker-compose部署qbittorrent","uri":"/posts/myblog23/"},{"categories":["教程"],"content":"2 创建docker-compose.yml文件 我们创建一个docker-compose.yml文件 sudo nano docker-compose.yml 文件中放入如下内容 version: \"2\" services: qbittorrent: image: linuxserver/qbittorrent:latest restart: unless-stopped container_name: qbittorrent environment: - PUID=1000 - PGID=1000 - TZ=Asia/Shanghai - UMASK_SET=022 - WEBUI_PORT=8081 ports: - 6881:6881 - 6881:6881/udp - 8081:8081 #前面的网页端口先不要改成自己喜欢的，进入修改好设置后在修改 volumes: - ./config:/config - ./downloads:/downloads ","date":"2024-02-12","objectID":"/posts/myblog23/:2:0","tags":["docker"],"title":"通过docker-compose部署qbittorrent","uri":"/posts/myblog23/"},{"categories":["教程"],"content":"3 启动容器 sudo docker-compose up -d ","date":"2024-02-12","objectID":"/posts/myblog23/:3:0","tags":["docker"],"title":"通过docker-compose部署qbittorrent","uri":"/posts/myblog23/"},{"categories":["教程"],"content":"4 查看默认密码 sudo docker logs qbittorrent ","date":"2024-02-12","objectID":"/posts/myblog23/:4:0","tags":["docker"],"title":"通过docker-compose部署qbittorrent","uri":"/posts/myblog23/"},{"categories":["教程"],"content":"5 简单配置 我们访问ip:8081就可以进行进行简单的配置了，需要修改端口映射先要进入设置，关闭启用跨站请求伪造(CSRF)保护后在修改映射端口。 停止容器 sudo docker-compose down 删除镜像 sudo docker rmi linuxserver/qbittorrent:latest 更新qbittorrent容器到docker-compose.yml的保存位置即qbittorrent文件夹内，先sudo docker-compose down停止容器，再删除镜像，然后启动容器sudo docker-compose up -d，qbittorrent容器即完成更新。 ","date":"2024-02-12","objectID":"/posts/myblog23/:5:0","tags":["docker"],"title":"通过docker-compose部署qbittorrent","uri":"/posts/myblog23/"},{"categories":["教程"],"content":"这篇文章介绍了通过docker-compose部署百度云盘的方法","date":"2024-02-12","objectID":"/posts/myblog22/","tags":["docker"],"title":"通过docker-compose部署百度云盘","uri":"/posts/myblog22/"},{"categories":["教程"],"content":"这篇文章介绍了通过docker-compose部署百度云盘的方法 注意 前情提要：安装docker和docker-compose请看本篇教程 ","date":"2024-02-12","objectID":"/posts/myblog22/:0:0","tags":["docker"],"title":"通过docker-compose部署百度云盘","uri":"/posts/myblog22/"},{"categories":["教程"],"content":"1 创建文件夹 我们在自己习惯的地方，创建一个文件夹放置百度云盘的映射文件 mkdir baidunetdisk 进入这个文件文件夹。 cd baidunetdisk ","date":"2024-02-12","objectID":"/posts/myblog22/:1:0","tags":["docker"],"title":"通过docker-compose部署百度云盘","uri":"/posts/myblog22/"},{"categories":["教程"],"content":"2 创建docker-compose.yml文件 我们创建一个docker-compose.yml文件 sudo nano docker-compose.yml x86处理器在文件中放入如下内容 version: \"3.9\" services: baidunetdisk: container_name: baidunetdisk image: johngong/baidunetdisk:latest restart: unless-stopped ports: - \"5800:5800\" #前面的端口号可以改成自己的 - \"5900:5900\" volumes: - ./config:/config - ./config/baidunetdiskdownload:/config/baidunetdiskdownload arm64处理器在文件中放入如下内容 version: \"3.9\" services: baidunetdisk: container_name: baidunetdisk image: emuqi/baidunetdisk-arm64-vnc:latest restart: unless-stopped environment: - USER_ID=1000 - GROUP_ID=1000 ports: - \"5800:5800\" #前面的端口号可以改成自己的 - \"5900:5900\" volumes: - ./config:/config - ./config/baidunetdiskdownload:/config/baidunetdiskdownload ","date":"2024-02-12","objectID":"/posts/myblog22/:2:0","tags":["docker"],"title":"通过docker-compose部署百度云盘","uri":"/posts/myblog22/"},{"categories":["教程"],"content":"3 启动容器 sudo docker-compose up -d ","date":"2024-02-12","objectID":"/posts/myblog22/:3:0","tags":["docker"],"title":"通过docker-compose部署百度云盘","uri":"/posts/myblog22/"},{"categories":["教程"],"content":"4 简单配置 我们访问ip:5800就可以进行进行简单的配置了。 停止容器 sudo docker-compose down 删除镜像 sudo docker rmi johngong/baidunetdisk:latest #x86处理器删除镜像 sudo docker rmi emuqi/baidunetdisk-arm64-vnc:latest #arm64处理器删除镜像 更新baidunetdisk容器到docker-compose.yml的保存位置即baidunetdisk文件夹内，先sudo docker-compose down停止容器，再删除镜像，然后启动容器sudo docker-compose up -d，baidunetdisk容器即完成更新。 ","date":"2024-02-12","objectID":"/posts/myblog22/:4:0","tags":["docker"],"title":"通过docker-compose部署百度云盘","uri":"/posts/myblog22/"},{"categories":["教程"],"content":"这篇文章介绍了通过docker-compose部署memos备忘录的方法","date":"2024-02-12","objectID":"/posts/myblog21/","tags":["docker"],"title":"通过docker-compose部署memos备忘录","uri":"/posts/myblog21/"},{"categories":["教程"],"content":"这篇文章介绍了通过docker-compose部署memos备忘录的方法 注意 前情提要：安装docker和docker-compose请看本篇教程 ","date":"2024-02-12","objectID":"/posts/myblog21/:0:0","tags":["docker"],"title":"通过docker-compose部署memos备忘录","uri":"/posts/myblog21/"},{"categories":["教程"],"content":"1 创建文件夹 我们在自己习惯的地方，创建一个文件夹放置memeos的映射文件 mkdir memeos 进入这个文件文件夹。 cd memeos ","date":"2024-02-12","objectID":"/posts/myblog21/:1:0","tags":["docker"],"title":"通过docker-compose部署memos备忘录","uri":"/posts/myblog21/"},{"categories":["教程"],"content":"2 创建docker-compose.yml文件 我们创建一个docker-compose.yml文件 sudo nano docker-compose.yml 文件中放入如下内容 version: \"3\" services: memos: image: neosmemo/memos:latest restart: always container_name: memeos ports: - \"5230:5230\" #前面的端口号可以改成自己需要的 volumes: - ./data:/var/opt/memos ","date":"2024-02-12","objectID":"/posts/myblog21/:2:0","tags":["docker"],"title":"通过docker-compose部署memos备忘录","uri":"/posts/myblog21/"},{"categories":["教程"],"content":"3 启动容器 sudo docker-compose up -d ","date":"2024-02-12","objectID":"/posts/myblog21/:3:0","tags":["docker"],"title":"通过docker-compose部署memos备忘录","uri":"/posts/myblog21/"},{"categories":["教程"],"content":"4 简单配置 我们配置memeos容器使用的端口号是5230，我们访问ip:5230然后设置管理员用户明和密码，然后登陆就可以了。 停止容器 sudo docker-compose down 删除镜像 sudo docker rmi neosmemo/memos:latest 更新memeos容器到docker-compose.yml的保存位置即memeos文件夹内，先sudo docker-compose down停止容器，再删除镜像，然后启动容器sudo docker-compose up -d，memeos容器即完成更新。 ","date":"2024-02-12","objectID":"/posts/myblog21/:4:0","tags":["docker"],"title":"通过docker-compose部署memos备忘录","uri":"/posts/myblog21/"},{"categories":["教程"],"content":"这篇文章介绍了设置小雅每日定时更新容器和数据的方法","date":"2024-02-12","objectID":"/posts/myblog20/","tags":["docker"],"title":"设置小雅每日定时更新容器和数据","uri":"/posts/myblog20/"},{"categories":["教程"],"content":"这篇文章介绍了设置小雅每日定时更新容器和数据的方法 注意 前情提要：通过docker-compose部署小雅请看本篇教程 ","date":"2024-02-12","objectID":"/posts/myblog20/:0:0","tags":["docker"],"title":"设置小雅每日定时更新容器和数据","uri":"/posts/myblog20/"},{"categories":["教程"],"content":"0 切换root用户 我们直接切换到root用户，部分设备登陆就是root用户无需切换。 su 输入root用户密码 如未设置过root密码使用如下命令设置 sudo passwd root ","date":"2024-02-12","objectID":"/posts/myblog20/:1:0","tags":["docker"],"title":"设置小雅每日定时更新容器和数据","uri":"/posts/myblog20/"},{"categories":["教程"],"content":"1 情况一：使用我介绍的docker-compose方法 ","date":"2024-02-12","objectID":"/posts/myblog20/:2:0","tags":["docker"],"title":"设置小雅每日定时更新容器和数据","uri":"/posts/myblog20/"},{"categories":["教程"],"content":"1.1 创建sh脚本 进入主目录下docke_data\\xiaoya文件夹，以下涉及hsj的位置都改为自己的用户名 cd /home/hsj/docker_data/xiaoya 创建sh脚本文件 nano xiaoya1.sh 粘贴如下内容，并保存 #! /bin/bash cd /home/hsj/docker_data/xiaoya/ docker-compose down docker rmi xiaoyaliu/alist:latest docker-compose up -d docker volume prune -f exit 0 然后授予xiaoya1.sh可执行权限 chmod +x xiaoya1.sh ","date":"2024-02-12","objectID":"/posts/myblog20/:2:1","tags":["docker"],"title":"设置小雅每日定时更新容器和数据","uri":"/posts/myblog20/"},{"categories":["教程"],"content":"1.2 添加定时任务 然后添加定时任务 crontab -e 添加一行并输入如下内容并保存 30 6 * * * /home/hsj/docker_data/xiaoya/xiaoya1.sh 这样我们就创建了一个每天早上6:30自动更新小雅容器的定时任务，同时也会更新内容数据。 ","date":"2024-02-12","objectID":"/posts/myblog20/:2:2","tags":["docker"],"title":"设置小雅每日定时更新容器和数据","uri":"/posts/myblog20/"},{"categories":["教程"],"content":"2 情况二：使用小雅页面的一键安装脚本 ","date":"2024-02-12","objectID":"/posts/myblog20/:3:0","tags":["docker"],"title":"设置小雅每日定时更新容器和数据","uri":"/posts/myblog20/"},{"categories":["教程"],"content":"2.1 创建sh脚本 进入根录下/etc/xiaoya文件夹。 cd /etc/xiaoya 创建sh脚本文件 nano xiao1.sh bridge模式粘贴如下内容，并保存 #! /bin/bash docker stop xiaoya docker rm xiaoya docker rmi xiaoyaliu/alist:latest docker run -d -p 5678:80 -p 2345:2345 -p 2346:2346 -v /etc/xiaoya:/data --restart=always --name=xiaoya xiaoyaliu/alist:latest docker volume prune -f exit 0 host模式粘贴如下内容，并保存 #! /bin/bash docker stop xiaoya docker rm xiaoya docker rmi xiaoyaliu/alist:hostmode docker run -d --network=host -v /etc/xiaoya:/data --restart=always --name=xiaoya xiaoyaliu/alist:hostmode docker volume prune -f exit 0 然后授予xiao1.sh可执行权限 chmod +x xiao1.sh ","date":"2024-02-12","objectID":"/posts/myblog20/:3:1","tags":["docker"],"title":"设置小雅每日定时更新容器和数据","uri":"/posts/myblog20/"},{"categories":["教程"],"content":"2.2 添加定时任务 然后添加定时任务 crontab -e 添加一行并输入如下内容并保存 30 6 * * * /etc/xiaoya/xiao1.sh 这样我们就创建了一个每天早上6:30自动更新小雅容器的定时任务，同时也会更新内容数据。 因为我只看个网页就行了，部署小雅emby需要160Gb的空间，我也用不上emby海报墙所以我也没有部署emby，也没考虑过和emby交互的问题，如果大家需要emby，我建议大家使用小雅页面下方提供的一键部署方式 ","date":"2024-02-12","objectID":"/posts/myblog20/:3:2","tags":["docker"],"title":"设置小雅每日定时更新容器和数据","uri":"/posts/myblog20/"},{"categories":["教程"],"content":"这篇文章介绍了通过docker-compose部署cloudreve的方法","date":"2024-02-12","objectID":"/posts/myblog19/","tags":["docker"],"title":"通过docker-compose部署cloudreve","uri":"/posts/myblog19/"},{"categories":["教程"],"content":"这篇文章介绍了通过docker-compose部署cloudreve的方法 注意 前情提要：安装docker和docker-compose请看本篇教程 注1、本期对应视频地址 注2、cloudreve官网 ","date":"2024-02-12","objectID":"/posts/myblog19/:0:0","tags":["docker"],"title":"通过docker-compose部署cloudreve","uri":"/posts/myblog19/"},{"categories":["教程"],"content":"1 创建文件夹 我们在自己习惯的地方，创建一个文件夹放置cloudreve的映射文件，复制全部命令粘贴回车。 mkdir -vp cloudreve/{uploads,avatar} \\ \u0026\u0026 touch cloudreve/conf.ini \\ \u0026\u0026 touch cloudreve/cloudreve.db 进入这个文件文件夹。 cd cloudreve ","date":"2024-02-12","objectID":"/posts/myblog19/:1:0","tags":["docker"],"title":"通过docker-compose部署cloudreve","uri":"/posts/myblog19/"},{"categories":["教程"],"content":"2 创建docker-compose.yml文件 我们创建一个docker-compose.yml文件 sudo nano docker-compose.yml 文件中放入如下内容 version: \"3.8\" services: cloudreve: container_name: cloudreve image: cloudreve/cloudreve:latest restart: unless-stopped ports: - \"5212:5212\" #前面的端口号可以改成自己的 volumes: - ./uploads:/cloudreve/uploads - ./conf.ini:/cloudreve/conf.ini - ./cloudreve.db:/cloudreve/cloudreve.db - ./avatar:/cloudreve/avatar ","date":"2024-02-12","objectID":"/posts/myblog19/:2:0","tags":["docker"],"title":"通过docker-compose部署cloudreve","uri":"/posts/myblog19/"},{"categories":["教程"],"content":"3 启动容器 sudo docker-compose up -d ","date":"2024-02-12","objectID":"/posts/myblog19/:3:0","tags":["docker"],"title":"通过docker-compose部署cloudreve","uri":"/posts/myblog19/"},{"categories":["教程"],"content":"4 简单配置 我们访问ip:5212就可以进行进行简单的配置了。我没有在同一个堆部署aria2，我们可以单独部署aria2配合管理页面，也是可以通到cloudreve里的。但我感觉aria2没有什么作用，因为至少我下载种子基本没有速度，我都给down了。所以我这个就是纯净的网盘，需要配合aria2可以单独部署aria2，也可以使用官方的docker-compose.yml 停止容器 sudo docker-compose down 删除镜像 sudo docker rmi cloudreve/cloudreve:latest 更新cloudreve容器到docker-compose.yml的保存位置即cloudreve文件夹内，先sudo docker-compose down停止容器，再删除镜像，然后启动容器sudo docker-compose up -d，cloudreve容器即完成更新。 ","date":"2024-02-12","objectID":"/posts/myblog19/:4:0","tags":["docker"],"title":"通过docker-compose部署cloudreve","uri":"/posts/myblog19/"},{"categories":["教程"],"content":"这篇文章介绍了通过docker-compose部署jellyfin的方法","date":"2024-02-12","objectID":"/posts/myblog18/","tags":["docker"],"title":"通过docker-compose部署jellyfin","uri":"/posts/myblog18/"},{"categories":["教程"],"content":"这篇文章介绍了通过docker-compose部署jellyfin的方法 注意 前情提要：安装docker和docker-compose请看本篇教程 注1、本期对应视频地址 ","date":"2024-02-12","objectID":"/posts/myblog18/:0:0","tags":["docker"],"title":"通过docker-compose部署jellyfin","uri":"/posts/myblog18/"},{"categories":["教程"],"content":"1 创建文件夹 我们在自己习惯的地方，创建一个文件夹放置jellyfin的映射文件 mkdir jellyfin 进入这个文件文件夹。 cd jellyfin ","date":"2024-02-12","objectID":"/posts/myblog18/:1:0","tags":["docker"],"title":"通过docker-compose部署jellyfin","uri":"/posts/myblog18/"},{"categories":["教程"],"content":"2 创建docker-compose.yml文件 我们创建一个docker-compose.yml文件 sudo nano docker-compose.yml 文件中放入如下内容 version: \"3.9\" services: jellyfin1: image: jellyfin/jellyfin:latest restart: always container_name: jellyfin01 network_mode: host volumes: - ./cache:/cache - ./config:/config - ./media:/media ","date":"2024-02-12","objectID":"/posts/myblog18/:2:0","tags":["docker"],"title":"通过docker-compose部署jellyfin","uri":"/posts/myblog18/"},{"categories":["教程"],"content":"3 启动容器 sudo docker-compose up -d ","date":"2024-02-12","objectID":"/posts/myblog18/:3:0","tags":["docker"],"title":"通过docker-compose部署jellyfin","uri":"/posts/myblog18/"},{"categories":["教程"],"content":"4 简单配置 我们启动jellyfin容器使用网络模式是host，端口号是容器默认的8096，我们访问ip:8096然后进行简单的配置就可以了。 停止容器 sudo docker-compose down 删除镜像 sudo docker rmi jellyfin/jellyfin:latest 更新jellyfin容器到docker-compose.yml的保存位置即jellyfin文件夹内，先sudo docker-compose down停止容器，再删除镜像，然后启动容器sudo docker-compose up -d，jellyfin容器即完成更新。 ","date":"2024-02-12","objectID":"/posts/myblog18/:4:0","tags":["docker"],"title":"通过docker-compose部署jellyfin","uri":"/posts/myblog18/"},{"categories":["教程"],"content":"这篇文章介绍了通过daoker-compose部署NAS版迅雷的方法","date":"2024-02-12","objectID":"/posts/myblog17/","tags":["docker"],"title":"通过daoker-compose部署NAS版迅雷","uri":"/posts/myblog17/"},{"categories":["教程"],"content":"这篇文章介绍了通过daoker-compose部署NAS版迅雷的方法 注意 前情提要：安装docker和docker-compose请看本篇教程 注1、本期对应视频地址 ","date":"2024-02-12","objectID":"/posts/myblog17/:0:0","tags":["docker"],"title":"通过daoker-compose部署NAS版迅雷","uri":"/posts/myblog17/"},{"categories":["教程"],"content":"1 创建文件夹 我们在自己习惯的地方，创建一个文件夹放置迅雷的映射文件 mkdir xunlei 进入这个文件文件夹。 cd xunlei ","date":"2024-02-12","objectID":"/posts/myblog17/:1:0","tags":["docker"],"title":"通过daoker-compose部署NAS版迅雷","uri":"/posts/myblog17/"},{"categories":["教程"],"content":"2 创建docker-compose.yml文件 我们创建一个docker-compose.yml文件 sudo nano docker-compose.yml 文件中放入如下内容 version: \"3.9\" services: xunlei: image: cnk3x/xunlei:latest restart: unless-stopped container_name: xunlei1 privileged: true hostname: mynas network_mode: host volumes: - ./data:/xunlei/data - ./downloads:/xunlei/downloads ","date":"2024-02-12","objectID":"/posts/myblog17/:2:0","tags":["docker"],"title":"通过daoker-compose部署NAS版迅雷","uri":"/posts/myblog17/"},{"categories":["教程"],"content":"3 启动容器 sudo docker-compose up -d ","date":"2024-02-12","objectID":"/posts/myblog17/:3:0","tags":["docker"],"title":"通过daoker-compose部署NAS版迅雷","uri":"/posts/myblog17/"},{"categories":["教程"],"content":"4 简单配置 我们启动迅雷容器使用网络模式是host，端口号是容器默认的2345，我们访问ip:2345扫码进行登录，让我们输入邀请码，我们输入迅雷牛通，这样我们就可以在迅雷手机app控制远程添加上传和下载了。 据说迅雷会在后台偷偷上传，我们在不需要时可以进入xunlei文件夹停止容器 sudo docker-compose down ","date":"2024-02-12","objectID":"/posts/myblog17/:4:0","tags":["docker"],"title":"通过daoker-compose部署NAS版迅雷","uri":"/posts/myblog17/"},{"categories":["教程"],"content":"分享通过docker-compose部署aria2的方法","date":"2024-02-12","objectID":"/posts/myblog16/","tags":["docker"],"title":"通过docker-compose部署aria2","uri":"/posts/myblog16/"},{"categories":["教程"],"content":"分享通过docker-compose部署aria2的方法。 注意 前情提要：安装docker和docker-compose请看本篇教程 ","date":"2024-02-12","objectID":"/posts/myblog16/:0:0","tags":["docker"],"title":"通过docker-compose部署aria2","uri":"/posts/myblog16/"},{"categories":["教程"],"content":"1 创建文件夹 我们在自己习惯的地方，创建一个文件夹放置aria2的映射文件。 mkdir aria2 进入这个文件文件夹 cd aria2 ","date":"2024-02-12","objectID":"/posts/myblog16/:1:0","tags":["docker"],"title":"通过docker-compose部署aria2","uri":"/posts/myblog16/"},{"categories":["教程"],"content":"2 创建docker-compose.yml文件 我们创建一个docker-compose.yml文件 sudo nano docker-compose.yml 文件中放入如下内容 version: \"3.8\" services: Aria2-Pro: container_name: aria2-pro image: p3terx/aria2-pro environment: - PUID=65534 - PGID=65534 - UMASK_SET=022 - RPC_SECRET=P3TERX #令牌可以修改成自己需要的 - RPC_PORT=6800 - LISTEN_PORT=6888 - DISK_CACHE=64M - IPV6_MODE=false - UPDATE_TRACKERS=true - CUSTOM_TRACKER_URL= - TZ=Asia/Shanghai volumes: - ./aria2-config:/config - ./aria2-downloads:/downloads ports: - 6800:6800 - 6888:6888 - 6888:6888/udp restart: unless-stopped driver: json-file options: max-size: 1m AriaNg: container_name: ariang image: p3terx/ariang command: --port 6880 --ipv6 ports: - 9040:6880 #管理网页的端口可以9040改成自己需要的 restart: unless-stopped logging: driver: json-file options: max-size: 1m ","date":"2024-02-12","objectID":"/posts/myblog16/:2:0","tags":["docker"],"title":"通过docker-compose部署aria2","uri":"/posts/myblog16/"},{"categories":["教程"],"content":"3 启动容器 sudo docker-compose up -d ","date":"2024-02-12","objectID":"/posts/myblog16/:3:0","tags":["docker"],"title":"通过docker-compose部署aria2","uri":"/posts/myblog16/"},{"categories":["教程"],"content":"4 简单配置 输入设备ip:9040进入AriaNg，点击AriaNg设置点击PRC输入令牌 配置令牌 ","date":"2024-02-12","objectID":"/posts/myblog16/:4:0","tags":["docker"],"title":"通过docker-compose部署aria2","uri":"/posts/myblog16/"},{"categories":["教程"],"content":"附注：GitHub上p3terx提供的原版yml version: \"3.8\" services: Aria2-Pro: container_name: aria2-pro image: p3terx/aria2-pro environment: - PUID=65534 - PGID=65534 - UMASK_SET=022 - RPC_SECRET=P3TERX - RPC_PORT=6800 - LISTEN_PORT=6888 - DISK_CACHE=64M - IPV6_MODE=false - UPDATE_TRACKERS=true - CUSTOM_TRACKER_URL= - TZ=Asia/Shanghai volumes: - ${PWD}/aria2-config:/config - ${PWD}/aria2-downloads:/downloads # If you use host network mode, then no port mapping is required. # This is the easiest way to use IPv6 networks. network_mode: host # network_mode: bridge # ports: # - 6800:6800 # - 6888:6888 # - 6888:6888/udp restart: unless-stopped # Since Aria2 will continue to generate logs, limit the log size to 1M to prevent your hard disk from running out of space. logging: driver: json-file options: max-size: 1m # AriaNg is just a static web page, usually you only need to deploy on a single host. AriaNg: container_name: ariang image: p3terx/ariang command: --port 6880 --ipv6 network_mode: host # network_mode: bridge # ports: # - 6880:6880 restart: unless-stopped logging: driver: json-file options: max-size: 1m ","date":"2024-02-12","objectID":"/posts/myblog16/:5:0","tags":["docker"],"title":"通过docker-compose部署aria2","uri":"/posts/myblog16/"},{"categories":["教程"],"content":"这篇文章介绍了通过docker-compose部署小雅alist的方法","date":"2024-02-12","objectID":"/posts/myblog15/","tags":["docker"],"title":"通过docker-compose部署小雅alist","uri":"/posts/myblog15/"},{"categories":["教程"],"content":"这篇文章介绍了通过docker-compose部署小雅alist的方法 注意 前情提要：安装docker和docker-compose请看本篇教程 注1、本期对应视频地址 注2、因为我只看个网页就行了，部署小雅emby需要160Gb的空间，我也用不上emby海报墙所以我也没有部署emby，也没考虑过和emby交互的问题，如果大家需要emby，我建议大家使用小雅页面下方提供的一键部署方式 ","date":"2024-02-12","objectID":"/posts/myblog15/:0:0","tags":["docker"],"title":"通过docker-compose部署小雅alist","uri":"/posts/myblog15/"},{"categories":["教程"],"content":"1 获取令牌和文件夹id ","date":"2024-02-12","objectID":"/posts/myblog15/:1:0","tags":["docker"],"title":"通过docker-compose部署小雅alist","uri":"/posts/myblog15/"},{"categories":["教程"],"content":"1.1 获取阿里云盘 Token 打开Alist官方文档，我们先获取阿里云盘token，在获取阿里云open的token，保存到文件备用。 ","date":"2024-02-12","objectID":"/posts/myblog15/:1:1","tags":["docker"],"title":"通过docker-compose部署小雅alist","uri":"/posts/myblog15/"},{"categories":["教程"],"content":"1.2 获取文件夹id 我们将先这个转存https://www.aliyundrive.com/s/rP9gP3h9asE到自己阿里云盘（选择资源库），然后浏览器打开转存后的目录，浏览器的地址https://www.aliyundrive.com/drive/file/resource/640xxxxxxxxxxxxxxxxxxxca8a最后一串就是，记得这个目录不要删，里面的内容可以定期删除。 ","date":"2024-02-12","objectID":"/posts/myblog15/:1:2","tags":["docker"],"title":"通过docker-compose部署小雅alist","uri":"/posts/myblog15/"},{"categories":["教程"],"content":"2 部署小雅alist ","date":"2024-02-12","objectID":"/posts/myblog15/:2:0","tags":["docker"],"title":"通过docker-compose部署小雅alist","uri":"/posts/myblog15/"},{"categories":["教程"],"content":"2.1 创建文件夹 找到自己想要保存配置文件的位置，然后创建放小雅docker数据的文件夹 mkdir xiaoya cd xiaoya mkdir data cd data ","date":"2024-02-12","objectID":"/posts/myblog15/:2:1","tags":["docker"],"title":"通过docker-compose部署小雅alist","uri":"/posts/myblog15/"},{"categories":["教程"],"content":"2.2 我们创建几个文件 #阿里云token放置文件 sudo nano mytoken.txt #阿里云open token放置文件 sudo nano myopentoken.txt #文件夹id放置文件 sudo nano temp_transfer_folder_id.txt #设置tvbox配置地址 sudo nano docker_address.txt #开启强制登陆，账号为dav sudo touch guestlogin.txt #账号的密码保存文件，密码不要稀奇古怪 sudo nano guestpass.txt 然后返回上一层文件夹 cd .. ","date":"2024-02-12","objectID":"/posts/myblog15/:2:2","tags":["docker"],"title":"通过docker-compose部署小雅alist","uri":"/posts/myblog15/"},{"categories":["教程"],"content":"2.3 我们创建docker-compose文件 sudo nano docker-compose.yml 将如下内容复制到文件中 version: \"3.9\" services: xiaoya1: image: xiaoyaliu/alist:latest restart: always container_name: xiaoya001 ports: - \"9060:80\" volumes: - ./data:/data ","date":"2024-02-12","objectID":"/posts/myblog15/:2:3","tags":["docker"],"title":"通过docker-compose部署小雅alist","uri":"/posts/myblog15/"},{"categories":["教程"],"content":"2.4 启动容器 sudo docker-compose up -d ","date":"2024-02-12","objectID":"/posts/myblog15/:2:4","tags":["docker"],"title":"通过docker-compose部署小雅alist","uri":"/posts/myblog15/"},{"categories":["教程"],"content":"2.5 停止容器 sudo docker-compose down ","date":"2024-02-12","objectID":"/posts/myblog15/:2:5","tags":["docker"],"title":"通过docker-compose部署小雅alist","uri":"/posts/myblog15/"},{"categories":["教程"],"content":"2.6 删除镜像 sudo docker rmi xiaoyaliu/alist:latest 更新小雅容器到docker-compose.yml的保存位置即xiaoya文件夹内，先sudo docker-compose down停止容器，再删除镜像，然后启动容器sudo docker-compose up -d，小雅容器即完成更新。 删除的话，只要在停止容器后删除整个xiaoya文件夹和镜像就可以了。 ","date":"2024-02-12","objectID":"/posts/myblog15/:2:6","tags":["docker"],"title":"通过docker-compose部署小雅alist","uri":"/posts/myblog15/"},{"categories":["教程"],"content":"2.7 清除小雅创建的无用的docker卷 删除无用的docker卷，无意间发现小雅每次重启都会创建一个卷，每个15MB，重启100次大概占用1.5Gb，这样日积月累下来也是会占用不少存储空间。不定时可以运行如下命令，然后按Y回车，清除无用的docker卷。 sudo docker volume prune ","date":"2024-02-12","objectID":"/posts/myblog15/:2:7","tags":["docker"],"title":"通过docker-compose部署小雅alist","uri":"/posts/myblog15/"},{"categories":["教程"],"content":"3 建议需要时重启小雅容器以更新内容 法一：只更新影视数据，不更新容器本体，运行重启命令，重启后即更新。 sudo docker restart xiaoya001 法二：设置每日定时运行脚本，同时更新容器和数据教程链接","date":"2024-02-12","objectID":"/posts/myblog15/:3:0","tags":["docker"],"title":"通过docker-compose部署小雅alist","uri":"/posts/myblog15/"},{"categories":["教程"],"content":"这篇文章展示了安装docker和docker-compose需要用到的几个简单命令","date":"2024-01-05","objectID":"/posts/myblog14/","tags":["docker"],"title":"安装docker和docker-compose","uri":"/posts/myblog14/"},{"categories":["教程"],"content":"这篇文章展示了安装docker和docker-compose需要用到的几个简单命令. 注意 1、arm64处理器对应视频。 2、x86处理器对应视频。 ","date":"2024-01-05","objectID":"/posts/myblog14/:0:0","tags":["docker"],"title":"安装docker和docker-compose","uri":"/posts/myblog14/"},{"categories":["教程"],"content":"1 安装docker 添加下载docker的镜像站，以下两个任选一个即可。 #清华大学镜像站 export DOWNLOAD_URL=\"https://mirrors.tuna.tsinghua.edu.cn/docker-ce\" #中科大镜像站 export DOWNLOAD_URL=\"http://mirrors.ustc.edu.cn/docker-ce\" 全新debian不带curl需要先安装，Ubuntu自带。 sudo apt install curl 然后使用如下命令然后等待即可 sudo curl -fsSL https://get.hsj01wzonline.top:9186/sh/docker.sh | bash 设置docker开机自启动 sudo systemctl enable docker ","date":"2024-01-05","objectID":"/posts/myblog14/:1:0","tags":["docker"],"title":"安装docker和docker-compose","uri":"/posts/myblog14/"},{"categories":["教程"],"content":"2 安装docker-compose 安装docker-compose到GitHub发布页下载，图片中圈红的为arm64版，x86_64处理器版在GitHub发布页需要点击Show all 26 assets才能找到对应版本，也可以到我的网盘下载。 GitHub发布页 将docker-compose的二进制包传输到设备中的下载文件夹，然后执行以下命令。 #进入到下载文件夹 cd Downloads #将docker-compose放置到位 sudo mv docker-compose-linux-aarch64 /usr/bin/docker-compose #赋予docker-compose可执行权限 sudo chmod +x /usr/bin/docker-compose #查看docker-compose版本，试验是否安装成功 sudo docker-compose -v ","date":"2024-01-05","objectID":"/posts/myblog14/:2:0","tags":["docker"],"title":"安装docker和docker-compose","uri":"/posts/myblog14/"},{"categories":["教程"],"content":"3 配置docker ","date":"2024-01-05","objectID":"/posts/myblog14/:3:0","tags":["docker"],"title":"安装docker和docker-compose","uri":"/posts/myblog14/"},{"categories":["教程"],"content":"3.1 修改docker配置文件 编辑daemon.json文件，添加IPv6支持，和限制日志大小 sudo nano /etc/docker/daemon.json 放入如下内容 { \"log-driver\": \"json-file\", \"log-opts\": { \"max-size\": \"20m\", \"max-file\": \"3\" }, \"ipv6\": true, \"fixed-cidr-v6\": \"fd00:dead:beef:c0::/80\", \"experimental\":true, \"ip6tables\":true } 然后重启 Docker 服务 sudo systemctl restart docker ","date":"2024-01-05","objectID":"/posts/myblog14/:3:1","tags":["docker"],"title":"安装docker和docker-compose","uri":"/posts/myblog14/"},{"categories":["教程"],"content":"4 给docker拉取镜像添加代理 如何挂代理请自行研究，本小节指涉及把代理添加到docker拉取镜像的过程中，启动的docker容器是没有代理的。 ","date":"2024-01-05","objectID":"/posts/myblog14/:4:0","tags":["docker"],"title":"安装docker和docker-compose","uri":"/posts/myblog14/"},{"categories":["教程"],"content":"4.1 创建配置文件夹和文件 创建一个Docker配置文件（如果不存在），并在其中添加代理设置。 sudo mkdir /etc/systemd/system/docker.service.d/ sudo nano /etc/systemd/system/docker.service.d/http-proxy.conf ","date":"2024-01-05","objectID":"/posts/myblog14/:4:1","tags":["docker"],"title":"安装docker和docker-compose","uri":"/posts/myblog14/"},{"categories":["教程"],"content":"4.2 在打开的文件中添加以下内容 按自己的实际修改 “your_proxy_server” 和 “proxy_port” 替换为实际的代理服务器和端口号。 [Service] Environment=\"HTTP_PROXY=http://your_proxy_server:proxy_port\" Environment=\"HTTPS_PROXY=http://your_proxy_server:proxy_port\" Environment=\"NO_PROXY=localhost,127.0.0.1\" ","date":"2024-01-05","objectID":"/posts/myblog14/:4:2","tags":["docker"],"title":"安装docker和docker-compose","uri":"/posts/myblog14/"},{"categories":["教程"],"content":"4.3 重启docker sudo systemctl daemon-reload sudo systemctl restart docker ","date":"2024-01-05","objectID":"/posts/myblog14/:4:3","tags":["docker"],"title":"安装docker和docker-compose","uri":"/posts/myblog14/"},{"categories":["教程"],"content":"5 创建portainer容器 我们可以通过部署一个可视化的容器管理面板来直观的管理容器，标签latest已经包含了arm64和x86处理器，两种处理器统一使用如下命令即可。 sudo docker run -d --restart=always --name=\"portainer\" -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data 6053537/portainer-ce:latest 需要使用ufw防火墙管理可将-p 9000:9000改为--net=host访问都是9000端口 另附docker-compose.yml文件 version: \"3.9\" services: portainer: image: 6053537/portainer-ce:latest restart: always container_name: portainer ports: - 9000:9000 volumes: - /var/run/docker.sock:/var/run/docker.sock - ./data:/data ","date":"2024-01-05","objectID":"/posts/myblog14/:5:0","tags":["docker"],"title":"安装docker和docker-compose","uri":"/posts/myblog14/"},{"categories":["教程"],"content":"5 结语 我也是Linux的业余用户，在这里给大家分享了docker安装的常用的命令，希望能帮助到大家。 ","date":"2024-01-05","objectID":"/posts/myblog14/:6:0","tags":["docker"],"title":"安装docker和docker-compose","uri":"/posts/myblog14/"},{"categories":["教程"],"content":"在树莓派上安装kodi并设置开机自启，接入红外模块并配置遥控器。","date":"2023-12-03","objectID":"/posts/myblog13/","tags":["树莓派"],"title":"树莓派改造kodi影音盒子","uri":"/posts/myblog13/"},{"categories":["教程"],"content":"在树莓派上安装kodi并设置开机自启，接入红外模块并配置遥控器。 注意 1、大家有留言可以到本期哔哩哔哩视频地址给我留言。 2、安装配置完成效果视频地址 3、使用的是树莓派4b 4、使用的系统为基于Debian12 Bookworm的Raspberry Pi OS(64-bit)。 5、使用的红外接收模块为HS0038B 6、以下涉及/home/hsj/文件夹的，均需将hsj改为自己的树莓派用户名 ","date":"2023-12-03","objectID":"/posts/myblog13/:0:0","tags":["树莓派"],"title":"树莓派改造kodi影音盒子","uri":"/posts/myblog13/"},{"categories":["教程"],"content":"1 安装kodi ","date":"2023-12-03","objectID":"/posts/myblog13/:1:0","tags":["树莓派"],"title":"树莓派改造kodi影音盒子","uri":"/posts/myblog13/"},{"categories":["教程"],"content":"1.1 安装kodi #安装kodi sudo apt install kodi #安装kodi的iptv插件 sudo apt install kodi-pvr-iptvsimple ","date":"2023-12-03","objectID":"/posts/myblog13/:1:1","tags":["树莓派"],"title":"树莓派改造kodi影音盒子","uri":"/posts/myblog13/"},{"categories":["教程"],"content":"1.2 设置kodi开机自启动 这里使用.desktop文件的方式实现开机自启动kodi,特点是是在桌面启动后才会启动软件，缺点是每启动一次桌面都会启动一次软件，不过这个缺点对我们用来当kodi机顶盒来说没有影响。 #在主目录进入.config文件夹 cd .config #创建autostart文件夹 mkdir autostart #创建自启动配置文件 nano kodi.desktop 在其中写入如下内容 [Desktop Entry] Name=controller Comment=controller Program Encoding=UTF-8 Exec=sh /home/hsj/Documents/kodi1.sh Terminal=false MultipleArgs=false Type=Application Categories=Application;Development; StartupNotify=true 按Ctrl + X离开，再按Y保存，然后回车。 我们继续配置kodi自启动的sh文件 nano /home/hsj/Documents/kodi1.sh 在其中写入如下内容 #! /bin/bash kodi exit 0 按Ctrl + X离开，再按Y保存，然后回车。 这样kodi安装和开机自启就配置好了，如果我们不需要开机自启，只要将kodi.desktop文件改个名字就好了，比如改成kodi.desktop1，需要自启动我们在把名字里的1删掉。 ","date":"2023-12-03","objectID":"/posts/myblog13/:1:2","tags":["树莓派"],"title":"树莓派改造kodi影音盒子","uri":"/posts/myblog13/"},{"categories":["教程"],"content":"2 配置红外模块 ","date":"2023-12-03","objectID":"/posts/myblog13/:2:0","tags":["树莓派"],"title":"树莓派改造kodi影音盒子","uri":"/posts/myblog13/"},{"categories":["教程"],"content":"2.1 HS0038B红外模块的接线 HS0038B红外模块有突起的那面朝上，从左至右的针脚如上图所示，分别为：OUT输出，GND接地和VCC电源。 HS0038B实物 HS0038B参数图 树莓派的引脚图如图所示 树莓派引脚图 我们用母对母杜邦线，将红外模块的VCC引脚接到树莓派的1 3.3V PWR，将GND接到9 GND，将OUT接到11 GPIO 17，至此接线就完成了。 ","date":"2023-12-03","objectID":"/posts/myblog13/:2:1","tags":["树莓派"],"title":"树莓派改造kodi影音盒子","uri":"/posts/myblog13/"},{"categories":["教程"],"content":"2.2 修改系统的配置文件 #修改配置文件 sudo nano /boot/config.txt #在其中加入一行如下内容保存 dtoverlay=gpio-ir,gpio_pin=17 ","date":"2023-12-03","objectID":"/posts/myblog13/:2:2","tags":["树莓派"],"title":"树莓派改造kodi影音盒子","uri":"/posts/myblog13/"},{"categories":["教程"],"content":"3 配置LIRC ","date":"2023-12-03","objectID":"/posts/myblog13/:3:0","tags":["树莓派"],"title":"树莓派改造kodi影音盒子","uri":"/posts/myblog13/"},{"categories":["教程"],"content":"3.1 安装lirc sudo apt install lirc ","date":"2023-12-03","objectID":"/posts/myblog13/:3:1","tags":["树莓派"],"title":"树莓派改造kodi影音盒子","uri":"/posts/myblog13/"},{"categories":["教程"],"content":"3.2 修改配置文件 sudo nano /etc/lirc/lirc_options.conf 将其中的两项参数改成如下内容并保存 driver = default device = /dev/lirc0 ","date":"2023-12-03","objectID":"/posts/myblog13/:3:2","tags":["树莓派"],"title":"树莓派改造kodi影音盒子","uri":"/posts/myblog13/"},{"categories":["教程"],"content":"3.3 测试红外是否正常 运行下面命令就可以开始测试 mode2 -d /dev/lirc0 执行该命令后，随便按下红外遥控器任意按键，出现如下字符即代表红外接收正常 pulse 629 space 518 pulse 627 space 523 pulse 628 ","date":"2023-12-03","objectID":"/posts/myblog13/:3:3","tags":["树莓派"],"title":"树莓派改造kodi影音盒子","uri":"/posts/myblog13/"},{"categories":["教程"],"content":"4 配置红外遥控器按键 ","date":"2023-12-03","objectID":"/posts/myblog13/:4:0","tags":["树莓派"],"title":"树莓派改造kodi影音盒子","uri":"/posts/myblog13/"},{"categories":["教程"],"content":"4.1 配置kodi_remote_lircd.conf文件 LIRC可以定义很多按键例如KEY_LEFT，KEY_RIGHT，KEY_SELECT等。而这些按键对应的遥控器信号就是通过/etc/lirc/lircd.conf.d目录下的配置文件进行关联映射。 我们要保证这个目录下只有一个结尾为.conf的文件 #我们先进入这个文件夹 sudo cd /etc/lirc/lircd.conf.d #文件夹中有个默认的conf文件，我们要用来参考，我们给它改个名让它不生效就行了。 sudo mv devinput.lircd.conf devinput.lircd.conf01 ","date":"2023-12-03","objectID":"/posts/myblog13/:4:1","tags":["树莓派"],"title":"树莓派改造kodi影音盒子","uri":"/posts/myblog13/"},{"categories":["教程"],"content":"4.2 [选作] 生成一个配置文件 我们使用下面命令生成一个配置文件，该文件仅用作配置文件的模板使用。(如觉得繁琐可跳到4.3节) irrecord -f -d /dev/lirc0 注意 1、提示 Press RETURN to continue. 回车，之后等待，千万别按键 2、提示 Enter name of remote (only ascii, no spaces) : 输入配置文件的名字 （比如：kodi_remote） 3、提示 Press RETURN now to start recording. 回车开始录入 4、我们只是为了获取配置文件格式，所以随意按几个不同的按键，一直按下去，直到出现提示让我们给按键起一个名字 5、接下来输入键名，然后按住该键，这里建议用 KEY_LEFT、KEY_RIGHT 类似的名字，这样不会报错，他默认是对键名格式有要求的，这类名字在上面我们改了名字的conf01文件中有很多，我们可以通过查找将我们要输入的按键尽量向这些规定好的按键名上贴近，忽略要求则可以在 irrecord 命令后加 –disable-spacename 6、录入两三个键就可以了，回车结束，我们只为了获得配置文件格式 7、回车后可能在当前目录直接生成 kodi_remote.lirc.conf 文件，也可能会让按一个键再结束（注意！是按一个键，快按，不是按住不动！） 8、复制模板到 /etc/lirc/lircd.conf.d文件夹 ","date":"2023-12-03","objectID":"/posts/myblog13/:4:2","tags":["树莓派"],"title":"树莓派改造kodi影音盒子","uri":"/posts/myblog13/"},{"categories":["教程"],"content":"4.3 将遥控器中的按键添加到配置文件中 我们使用下面的命令来读取遥控器发出的红外信号 mode2 -m -d /dev/lirc0 有时读取到信号可能不完整，我们多单按几次。每次的读取到的信号值不完全一样不影响。 比如现在我们要录入遥控器的上键 ，我们先将模板中的一个按键的name改为KEY_UP，我的建议是到conf01中搜索UP，找一个贴近的键名复制到name，然后我们按遥控器的上键。终端中出现如下一串数字。 620000 9176 4498 597 600 572 593 585 584 573 595 575 595 574 596 573 626 553 604 561 1675 570 1692 570 1683 558 1678 570 1679 574 1689 565 1684 567 1677 571 595 574 594 573 594 574 1692 563 1679 571 594 574 596 574 595 574 1689 566 1749 511 1682 572 590 570 648 520 1680 573 1674 567 1683 580 132000 我们将头尾两串长数字串舍，去从9176到580复制到模板中。这个对齐的要求，有人说不用对齐，有人说要严格对齐。我这里为了避免出错我就对齐好了，大家如果有时间也可以试试不对齐。我们按照这个模板的格式将需要的按键全部录入到模板中。 ","date":"2023-12-03","objectID":"/posts/myblog13/:4:3","tags":["树莓派"],"title":"树莓派改造kodi影音盒子","uri":"/posts/myblog13/"},{"categories":["教程"],"content":"4.4 测试按键 当需要的按键都配置好了，我们就可以进行测试。首先重启下lirc服务让它重新加载我们修改过的配置文件。 # 重启lirc服务 sudo service lircd restart # 测试按键 irw 运行irw命令后，按下刚刚配置的遥控器的按键比如“上键”。如果出现类似下面的输出则代表配置成功，lirc成功识别遥控器的“上键”。按下其他配置的按键，检查是否都正确输出对应的按键名。 0000000000000001 00 KEY_UP kodi_remote ","date":"2023-12-03","objectID":"/posts/myblog13/:4:4","tags":["树莓派"],"title":"树莓派改造kodi影音盒子","uri":"/posts/myblog13/"},{"categories":["教程"],"content":"4.5 配置KODI遥控器按键映射文件 要想使用遥控器控制KODI，我们需要配置将LIRC的按键与KODI的按键的映射关系。根据官方文档，KODI通过 Lircmap.xml这个文件进行关联映射。该文件的格式如下所示，点击XML横条打开查看。 \u003clircmap\u003e \u003c!-- 这里的device为上面kodi_remote.lircd.conf文件中name后的值 --\u003e \u003cremote device=\"mceusb\"\u003e \u003c!-- no Display --\u003e \u003cpower\u003ePower\u003c/power\u003e \u003cteletext\u003eTeletext\u003c/teletext\u003e \u003cmenu\u003eDVD\u003c/menu\u003e \u003cback\u003eBack\u003c/back\u003e \u003cinfo\u003eMore\u003c/info\u003e \u003cguide\u003eGuide\u003c/guide\u003e \u003cred\u003eRed\u003c/red\u003e \u003cgreen\u003eGreen\u003c/green\u003e \u003cyellow\u003eYellow\u003c/yellow\u003e \u003cblue\u003eBlue\u003c/blue\u003e \u003cleft\u003eLeft\u003c/left\u003e \u003cright\u003eRight\u003c/right\u003e \u003cup\u003eUp\u003c/up\u003e \u003cdown\u003eDown\u003c/down\u003e \u003cselect\u003eOK\u003c/select\u003e \u003cvolumeplus\u003eVolUp\u003c/volumeplus\u003e \u003cvolumeminus\u003eVolDown\u003c/volumeminus\u003e \u003cpageplus\u003eChanUp\u003c/pageplus\u003e \u003cpageminus\u003eChanDown\u003c/pageminus\u003e \u003cmute\u003eMute\u003c/mute\u003e \u003cplay\u003ePlay\u003c/play\u003e \u003cpause\u003ePause\u003c/pause\u003e \u003cstop\u003eStop\u003c/stop\u003e \u003cforward\u003eForward\u003c/forward\u003e \u003creverse\u003eRewind\u003c/reverse\u003e \u003cskipplus\u003eSkip\u003c/skipplus\u003e \u003cskipminus\u003eReplay\u003c/skipminus\u003e \u003crecord\u003eRecord\u003c/record\u003e \u003cone\u003eOne\u003c/one\u003e \u003ctwo\u003eTwo\u003c/two\u003e \u003cthree\u003eThree\u003c/three\u003e \u003cfour\u003eFour\u003c/four\u003e \u003cfive\u003eFive\u003c/five\u003e \u003csix\u003eSix\u003c/six\u003e \u003cseven\u003eSeven\u003c/seven\u003e \u003ceight\u003eEight\u003c/eight\u003e \u003cnine\u003eNine\u003c/nine\u003e \u003czero\u003eZero\u003c/zero\u003e \u003cclear\u003eClear\u003c/clear\u003e \u003center\u003eEnter\u003c/enter\u003e \u003c!-- with Display --\u003e \u003cdisplay\u003eAspect\u003c/display\u003e \u003cstart\u003eHome\u003c/start\u003e \u003cmyvideo\u003eVideos\u003c/myvideo\u003e \u003cmymusic\u003eMusic\u003c/mymusic\u003e \u003cmypictures\u003ePictures\u003c/mypictures\u003e \u003cmytv\u003eTV\u003c/mytv\u003e \u003c!-- old versions of harmony --\u003e \u003cstar\u003eStar\u003c/star\u003e \u003chash\u003eHash\u003c/hash\u003e \u003c/remote\u003e \u003c/lircmap\u003e 我们对这个文件进行修改，将remote device=“kodi_remote\"引号中的内容改成自己的，将每行的按键内容中间对应的按键名改成自己设置的。就像如下示例 \u003clircmap\u003e \u003c!-- 这里的device为上面kodi_remote.lircd.conf文件中name后的值 --\u003e \u003cremote device=\"kodi_remote\"\u003e \u003cpower\u003eKEY_POWER\u003c/power\u003e \u003cback\u003eKEY_BACK\u003c/back\u003e \u003cselect\u003eKEY_OK\u003c/select\u003e \u003cup\u003eKEY_UP\u003c/up\u003e \u003cdown\u003eKEY_DOWN\u003c/down\u003e \u003cleft\u003eKEY_LEFT\u003c/left\u003e \u003cright\u003eKEY_RIGHT\u003c/right\u003e \u003cvolumeplus\u003eKEY_VOLUMEUP\u003c/volumeplus\u003e \u003cvolumeminus\u003eKEY_VOLUMEDOWN\u003c/volumeminus\u003e \u003c/remote\u003e \u003c/lircmap\u003e 由于Lircmap.xml这个文件名不太好编辑，我们可一先将文件名设置为Lircmap.xml.txt，编辑完成在删除名字中的.txt。 我们将文件复制到kodi的配置文件夹 mv Lircmap.xml /home/hsj/.kodi/userdata/ ","date":"2023-12-03","objectID":"/posts/myblog13/:4:5","tags":["树莓派"],"title":"树莓派改造kodi影音盒子","uri":"/posts/myblog13/"},{"categories":["教程"],"content":"5 kodi kodi的iptv插件可以导入直播源，也可以投屏。也有很多插件例如哔哩哔哩插件。树莓派实在吃灰可以改造成一个kodi机顶盒试试，同时也可以随时关闭kodi开机自启，做其他任务。树莓派的关机也可以通过遥控kodi实现，就是插电拔电还是我们手动进行，欢迎大神继续完善，至于kodi的设置，网上亦有很多教程这里就不重复赘述了。 ","date":"2023-12-03","objectID":"/posts/myblog13/:5:0","tags":["树莓派"],"title":"树莓派改造kodi影音盒子","uri":"/posts/myblog13/"},{"categories":["教程"],"content":"6 结语 我也是业余用户，在这里给大家介绍树莓派kodi的安装，希望能帮助到大家。 附：树莓派HDMI的开启和关闭，关闭了HDMI信号，树莓派也在正常运行只是不显示了。 # 关闭HDMI信号 tvservice -o # 开启HDMI tvservice -p 参考文献： 树莓派开机自启动的3种方法 树莓派改造电视盒子-红外遥控KODI ","date":"2023-12-03","objectID":"/posts/myblog13/:6:0","tags":["树莓派"],"title":"树莓派改造kodi影音盒子","uri":"/posts/myblog13/"},{"categories":["教程"],"content":"使用docker-compose来部署Alist","date":"2023-12-03","objectID":"/posts/myblog12/","tags":["docker"],"title":"docker部署Alist","uri":"/posts/myblog12/"},{"categories":["教程"],"content":"使用docker-compose来部署Alist 注意 注1、本期视频教程地址. ","date":"2023-12-03","objectID":"/posts/myblog12/:0:0","tags":["docker"],"title":"docker部署Alist","uri":"/posts/myblog12/"},{"categories":["教程"],"content":"1 创建数据文件夹 mkdir docker_data cd docker_data mkdir alist cd alist ","date":"2023-12-03","objectID":"/posts/myblog12/:1:0","tags":["docker"],"title":"docker部署Alist","uri":"/posts/myblog12/"},{"categories":["教程"],"content":"2 编辑docker-compose.yml文件 nano docker-compose.yml 将如下内容全部粘贴到文件中，完后按Ctrl + X离开，再按Y保存，然后回车。 version: '3.3' services: alist: image: 'xhofe/alist:latest' container_name: alist volumes: - './data:/opt/alist/data' # network_mode: host ports: - '9030:5244' #前面的9030端口号可以换成自己喜欢的 environment: - PUID=0 - PGID=0 - UMASK=022 restart: unless-stopped ","date":"2023-12-03","objectID":"/posts/myblog12/:2:0","tags":["docker"],"title":"docker部署Alist","uri":"/posts/myblog12/"},{"categories":["教程"],"content":"4 部署容器 sudo docker-compose up -d ","date":"2023-12-03","objectID":"/posts/myblog12/:3:0","tags":["docker"],"title":"docker部署Alist","uri":"/posts/myblog12/"},{"categories":["教程"],"content":"5 查看初始密码 sudo docker logs alist ","date":"2023-12-03","objectID":"/posts/myblog12/:4:0","tags":["docker"],"title":"docker部署Alist","uri":"/posts/myblog12/"},{"categories":["教程"],"content":"6 对alist进行简单设置 我们访问ip:9030就可以进行配置了，设置在alist官方文档有详细说明，这里便省略了。 在alist官方文档即可学习使用 ","date":"2023-12-03","objectID":"/posts/myblog12/:5:0","tags":["docker"],"title":"docker部署Alist","uri":"/posts/myblog12/"},{"categories":["教程"],"content":"5 挂载本地存储位置 进入到data文件夹，创建一个alist中本地存储的保存文件夹 #进入data文件夹 cd data #创建本地文件夹 sudo mkdir local alist中添加本地存储对应填写的文件夹 /opt/alist/data/local ","date":"2023-12-03","objectID":"/posts/myblog12/:6:0","tags":["docker"],"title":"docker部署Alist","uri":"/posts/myblog12/"},{"categories":["教程"],"content":"8 更新alist 进入docker_data/alist文件夹，然后运行如下命令 #停止容器 sudo docker-compose down #删除镜像 sudo docker rmi xhofe/alist:latest 更新alist容器到docker-compose.yml的保存位置即alist文件夹内，先sudo docker-compose down停止容器，再删除镜像，然后启动容器sudo docker-compose up -d，alist容器即完成更新。 删除的话，只要在停止容器后删除整个alist文件夹和镜像就可以了。 ","date":"2023-12-03","objectID":"/posts/myblog12/:7:0","tags":["docker"],"title":"docker部署Alist","uri":"/posts/myblog12/"},{"categories":["教程"],"content":"3 结语 我也是Linux的业余用户，在这里给大家介绍了alist的部署，希望能帮助到大家。 ","date":"2023-12-03","objectID":"/posts/myblog12/:8:0","tags":["docker"],"title":"docker部署Alist","uri":"/posts/myblog12/"},{"categories":["教程"],"content":"简单启动树莓派和安装docker、docker-compose。","date":"2023-11-30","objectID":"/posts/myblog11/","tags":["docker","树莓派"],"title":"树莓派安装docker","uri":"/posts/myblog11/"},{"categories":["教程"],"content":"简单启动树莓派和安装docker、docker-compose。 注意 1、大家有留言可以到本期哔哩哔哩视频地址给我留言。 2、点击蓝色标题即可跳转到下载页面。 ","date":"2023-11-30","objectID":"/posts/myblog11/:0:0","tags":["docker","树莓派"],"title":"树莓派安装docker","uri":"/posts/myblog11/"},{"categories":["教程"],"content":"1 烧录系统 ","date":"2023-11-30","objectID":"/posts/myblog11/:1:0","tags":["docker","树莓派"],"title":"树莓派安装docker","uri":"/posts/myblog11/"},{"categories":["教程"],"content":"1.1 下载烧录工具 我我们到Raspberry Pi OS的官网向下滑可以看到树莓派的官方烧录工具Raspberry Pi Imager，我们下载对应的版本，我这里下载Windows版，下载好后安装。 ","date":"2023-11-30","objectID":"/posts/myblog11/:1:1","tags":["docker","树莓派"],"title":"树莓派安装docker","uri":"/posts/myblog11/"},{"categories":["教程"],"content":"1.2 烧录系统 我们先将SD卡通过读卡器连接到电脑，然后打开烧录软件，第一项Raspberry Pi Device我们是啥设备就选啥设备，我是4b我就选Raspberry Pi 4，第二项选择要烧录的系统，我们就选第一个Raspberry Pi OS(64-bit)，第三项存储卡我们就选择自己插入的SD卡就行了，一般看容量大小也不会选错。然后我们点击NEXT，点击编辑设置。 1、勾选Set username and password,设置用户名和密码 2、勾选配置WiFi设置热点名和密码，WiFi国家选择cn 3、勾选设置语言和时区，时区选择Asia/Shanghai,键盘布局选择cn 然后点击上方中部的SERVICES，选择开启SSH服务，选择使用密码登陆，点击下方保存 服务 接下来点击’是’，询问是否擦除磁盘选择’是’，等待刷入完成就可将SD卡插入树莓派开机了。 注意 1、用户名建议设置成和电脑一样的英文名，SSH连接时可以简化命令 2、编辑设置中的WiFi密码和用户密码建议每次重新输入一遍，烧录软件存储的密码会错乱，不知现在是否修复了。 ","date":"2023-11-30","objectID":"/posts/myblog11/:1:2","tags":["docker","树莓派"],"title":"树莓派安装docker","uri":"/posts/myblog11/"},{"categories":["教程"],"content":"2 简单设置 ","date":"2023-11-30","objectID":"/posts/myblog11/:2:0","tags":["docker","树莓派"],"title":"树莓派安装docker","uri":"/posts/myblog11/"},{"categories":["教程"],"content":"2.1 SSH远程连接到树莓派 按win + R在弹出的文本框输入cmd,按下回车，即会打开CMD终端 我们在终端中使用SSH命令连接树莓派 # ssh连接默认端口是22，如果本地机用户名和远程机用户名一致，可以省略用户名 ssh username@host # 用户名一致样例 ssh 192.168.1.7 # 用户名不一致样例,hsj即为我设置的树莓派用户名 ssh hsj@192.168.1.7 #192.168.1.x的具体地址需要自己到路由器查看路由器分配给树莓派的地址 # 也可以指定连接端口，端口默认为22,如没进行过调整可以省略 ssh -p port username@host 第一次连接问我们是否连接，我们输入yes按下回车，然后让输入我们设置的密码，输入密码不显示，但已经在输了，输完按回车即可连接。 连接成功 ","date":"2023-11-30","objectID":"/posts/myblog11/:2:1","tags":["docker","树莓派"],"title":"树莓派安装docker","uri":"/posts/myblog11/"},{"categories":["教程"],"content":"2.2 换源 注意 以下换源操作适用基于Debian12 Bookworm的Raspberry Pi OS(64-bit)系统。其他如Raspberry Pi OS(32-bit)系统或基于Debian11的系统或Ubuntu等其他系统请自行百度换源方法。 我个人习惯清华源，每次刷入装完Raspberry Pi OS后都会把软件源修改成清华源，命令如下 #打开Raspberrypi 软件仓库源文件 sudo nano /etc/apt/sources.list.d/raspi.list 将文件中的内容删除，上下左右键移动光标，←Backspace键删除，将如下全部内容粘贴到文件中。 deb https://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ bookworm main 按Ctrl + X离开，再按Y保存，然后回车。 同理还要更换Debian软件源 #打开Debian 仓库源文件 sudo nano /etc/apt/sources.list 替换为如下内容 deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware deb https://mirrors.tuna.tsinghua.edu.cn/debian-security bookworm-security main contrib non-free non-free-firmware # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security bookworm-security main contrib non-free non-free-firmware ","date":"2023-11-30","objectID":"/posts/myblog11/:2:2","tags":["docker","树莓派"],"title":"树莓派安装docker","uri":"/posts/myblog11/"},{"categories":["教程"],"content":"2.3 更新系统 接下来更新系统，每次更新依次使用下面两个命令。 #更新所有软件包的最新版本信息 sudo apt update #更新所有软件包到最新版本 sudo apt upgrade ","date":"2023-11-30","objectID":"/posts/myblog11/:2:3","tags":["docker","树莓派"],"title":"树莓派安装docker","uri":"/posts/myblog11/"},{"categories":["教程"],"content":"2.4 设置root用户密码 注意 root用户拥有系统最高权限，可以进行任何操作，如：删除整个系统 系统初始root账户是没有密码的，我们也不能切换到root用户，我们使用命令来设置root密码 # 输入修改密码的命令 sudo passwd root 会让我们设置密码和确认密码，一共输入两遍。 # 切换到root权限用户命令，需要输入root密码 su root ","date":"2023-11-30","objectID":"/posts/myblog11/:2:4","tags":["docker","树莓派"],"title":"树莓派安装docker","uri":"/posts/myblog11/"},{"categories":["教程"],"content":"2.5 开启vnc 我们先打开raspi-config #开启命令 sudo raspi-config 1、选择 3 Interface Options 回车 2、选择 I2 VNC 回车 3、红方块选择 是 回车 我们已经成功启动vnc远程连接了 ","date":"2023-11-30","objectID":"/posts/myblog11/:2:5","tags":["docker","树莓派"],"title":"树莓派安装docker","uri":"/posts/myblog11/"},{"categories":["教程"],"content":"2.6 设置系统为中文 我们先打开raspi-config #开启命令 sudo raspi-config 1、选择 5 Localisation Options 2、选择 L1 Locale 3、一直向下找到 [ ] zh_CN.UTF-8 UTF-8 4、按空格选中，然后按Tab切换到ok回车,然后选择zh_CN.UTF-8，然后按←切换到ok回车,等一会就帮我们设置好了，然后我们选择Finish回车就可以了，换语言设置重启生效，我们重启下。 ","date":"2023-11-30","objectID":"/posts/myblog11/:2:6","tags":["docker","树莓派"],"title":"树莓派安装docker","uri":"/posts/myblog11/"},{"categories":["教程"],"content":"2.7 [选作] vnc连接到树莓派 我们下载VNC Viewer这个连接工具用来连接到树莓派，安装完成后打开，我们在file新建一个New connection,填入树莓派的ip地址，然后连接，警告我们忽略，然后会让我们输入账号密码，就可以连接成功了。 ","date":"2023-11-30","objectID":"/posts/myblog11/:2:7","tags":["docker","树莓派"],"title":"树莓派安装docker","uri":"/posts/myblog11/"},{"categories":["教程"],"content":"以下内容已经过时，请参考\"安装docker和docker-compose\" ","date":"2023-11-30","objectID":"/posts/myblog11/:3:0","tags":["docker","树莓派"],"title":"树莓派安装docker","uri":"/posts/myblog11/"},{"categories":["教程"],"content":"3 安装docker ","date":"2023-11-30","objectID":"/posts/myblog11/:4:0","tags":["docker","树莓派"],"title":"树莓派安装docker","uri":"/posts/myblog11/"},{"categories":["教程"],"content":"3.1 使用一键安装命令安装docker 我们普通使用者当然是怎么简单怎么来了，这里就用官方的一键安装命令来安装docker，因为服务器在国外，我们耐心等待一会就好了。 #官网一键安装命令 sudo curl -fsSL https://get.docker.com | bash #查看docker版本，试验是否安装成功 sudo docker -v #设置docker开机自启 sudo systemctl enable docker ","date":"2023-11-30","objectID":"/posts/myblog11/:4:1","tags":["docker","树莓派"],"title":"树莓派安装docker","uri":"/posts/myblog11/"},{"categories":["教程"],"content":"3.2 给docker换源 我们创建一个放置docker源的配置文件 sudo nano /etc/docker/daemon.json 将如下全部内容粘贴到文件中。 { \"registry-mirrors\":[\"https://registry.docker-cn.com\"] } 按Ctrl + X离开，再按Y保存，然后回车。 然后我们重启docker服务 sudo systemctl restart docker ","date":"2023-11-30","objectID":"/posts/myblog11/:4:2","tags":["docker","树莓派"],"title":"树莓派安装docker","uri":"/posts/myblog11/"},{"categories":["教程"],"content":"4 安装docker-compose ","date":"2023-11-30","objectID":"/posts/myblog11/:5:0","tags":["docker","树莓派"],"title":"树莓派安装docker","uri":"/posts/myblog11/"},{"categories":["教程"],"content":"4.1 下载docker-compose 我们可以在vnc中使用浏览器下载。也可以在本机下载，然后在vnc中控制用U盘拷贝到树莓派，也可以用WinSCP连接后发送到树莓派。因为docker-compose是发布在GitHub上的所以有时候访问不太流畅。 大家可以到GitHub下载也可以到我的网盘下载，选择后缀Linux-aarch64版就行 选择版本如图 ","date":"2023-11-30","objectID":"/posts/myblog11/:5:1","tags":["docker","树莓派"],"title":"树莓派安装docker","uri":"/posts/myblog11/"},{"categories":["教程"],"content":"4.2 安装docker-compose 我们先进入到下载文件夹 #进入到下载文件夹 cd Download #将docker-compose放置到位 sudo mv docker-compose-linux-aarch64 /usr/bin/docker-compose #赋予docker-compose可执行权限 sudo chmod +x /usr/bin/docker-compose #查看docker-compose版本，试验是否安装成功 sudo docker-compose -v ","date":"2023-11-30","objectID":"/posts/myblog11/:5:2","tags":["docker","树莓派"],"title":"树莓派安装docker","uri":"/posts/myblog11/"},{"categories":["教程"],"content":"5 创建portainer容器 这个命令部署的是一个docker容器的可视化管理工具，带有一定的汉化。 sudo docker run -d --restart=always --name=\"portainer\" -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data 6053537/portainer-ce:latest 部署完成我们在浏览器输入树莓派的ip:9000就可以访问了 例 192.168.7:9000 ","date":"2023-11-30","objectID":"/posts/myblog11/:6:0","tags":["docker","树莓派"],"title":"树莓派安装docker","uri":"/posts/myblog11/"},{"categories":["教程"],"content":"6 结语 我也是业余用户，在这里给大家介绍docker的安装，希望能帮助到大家。 ","date":"2023-11-30","objectID":"/posts/myblog11/:7:0","tags":["docker","树莓派"],"title":"树莓派安装docker","uri":"/posts/myblog11/"},{"categories":["软件"],"content":"WinRAR的40天商用版本配合密钥就没有广告了","date":"2023-10-21","objectID":"/posts/myblog10/","tags":["windows","软件"],"title":"WinRAR解压软件无广告版","uri":"/posts/myblog10/"},{"categories":["软件"],"content":"WinRAR的40天商用版本配合密钥就没有广告了 注意 1、大家有留言可以到本期哔哩哔哩视频地址给我留言。 2、如果原来电脑上就有广告版WinRAR就先卸载掉 3、先看上面的视频教程，到百度WinRAR吧下载40天商用版本，在下载密钥，然后安装就行了。 4、下面蓝色的标题直接点击就是下载连接。 ","date":"2023-10-21","objectID":"/posts/myblog10/:0:0","tags":["windows","软件"],"title":"WinRAR解压软件无广告版","uri":"/posts/myblog10/"},{"categories":["软件"],"content":"1 百度WinRAR吧 WinRAR吧的置顶贴就有40天商用版的WinRAR下载。 ","date":"2023-10-21","objectID":"/posts/myblog10/:1:0","tags":["windows","软件"],"title":"WinRAR解压软件无广告版","uri":"/posts/myblog10/"},{"categories":["软件"],"content":"2 密钥文件 密钥文件和安装包在同一个文件夹内安装就会自动应用密钥，所以都在下载文件夹直接安装就行，就不会出现没次打开的广告了。 ","date":"2023-10-21","objectID":"/posts/myblog10/:2:0","tags":["windows","软件"],"title":"WinRAR解压软件无广告版","uri":"/posts/myblog10/"},{"categories":["游戏"],"content":"赛博朋克2077+往日之影DLC","date":"2023-09-28","objectID":"/posts/myblog09/","tags":["windows","游戏"],"title":"赛博朋克2077","uri":"/posts/myblog09/"},{"categories":["游戏"],"content":"赛博朋克2077+往日之影DLC 注意 1、百度云盘下载地址，百度云盘普遍使用无需下载其他云盘软件。 2、中国移动云盘下载地址，下载速度快,已更新2.1。 3、游戏占用82GB，压缩包和解压占用，需要电脑要有160GB的剩余空间。 ","date":"2023-09-28","objectID":"/posts/myblog09/:0:0","tags":["windows","游戏"],"title":"赛博朋克2077","uri":"/posts/myblog09/"},{"categories":["游戏"],"content":"1 解压 将20个压缩包全部下载，任意在一个压缩包右键“解压到当前文件夹”，也可以右键“解压到”，然后选择解压位置，建议解压到固态硬盘。 ","date":"2023-09-28","objectID":"/posts/myblog09/:1:0","tags":["windows","游戏"],"title":"赛博朋克2077","uri":"/posts/myblog09/"},{"categories":["游戏"],"content":"2 创建桌面快捷方式 进入Cyberpunk 2077文件夹，再进入bin文件夹，在进入x64文件夹，找到Cyberpunk2077.exe文件，右键“发送到” \u003e “桌面快捷方式”，这时桌面就出现游戏的快捷方式了，也可以将快捷方式重命名为“赛博朋克2077”。 ","date":"2023-09-28","objectID":"/posts/myblog09/:2:0","tags":["windows","游戏"],"title":"赛博朋克2077","uri":"/posts/myblog09/"},{"categories":["游戏"],"content":"3 结语 不玩了想删除，只要删除Cyberpunk 2077文件夹就行。建议使用中国移动云盘下载，经我测试速度可以达到25mb/s。如果中国移动云盘应该注册就有20G,可以先保存几个压缩包，下载完了再删除保存剩下几个。嫌麻烦也可以百度云慢慢等，有百度云VIP当然更好。 ","date":"2023-09-28","objectID":"/posts/myblog09/:3:0","tags":["windows","游戏"],"title":"赛博朋克2077","uri":"/posts/myblog09/"},{"categories":["书籍"],"content":"查理九世全三十本","date":"2023-09-16","objectID":"/posts/myblog08/","tags":["书籍"],"title":"查理九世","uri":"/posts/myblog08/"},{"categories":["书籍"],"content":"查理九世全三十本 谨以此书纪念我的童年，那是一段小有遗憾的幸福时光。——雷欧幻像 查理(狗)：“我都不记得了……” 墨多多：“这只古怪的狗狗是从什么时候闯入我的生活的?” 再没有一条街，拥有如此多的幽灵传说! ","date":"2023-09-16","objectID":"/posts/myblog08/:0:0","tags":["书籍"],"title":"查理九世","uri":"/posts/myblog08/"},{"categories":["书籍"],"content":"0 引子 黑贝街的传说 黑贝街，一条出了名的鬼街，整个城市亡灵传说的发源地!街道两边全是上了年头的古董老房子，无头僮尸啊，成精黑猫啊，迷路三千年到处转悠的木乃伊少女啊，据说全都在黑贝街找房子住下了! 午夜，行人稀少，月亮孤零零半挂在浓稠漆黑的天幕上，默默无语地注视着这条年代久远、屋宇参差的老街。 寒风呼啸，树影婆娑，微弱的路灯光线渲染出大片大片的迷离幻影，仿佛一只只张牙舞爪的怪兽，悄悄地盘踞 在老街的树叶下、墙壁里、石缝中，只等着行人通过，便立即扑上去吞个一干二净! 一个穿着大风衣的人拉着一个小男孩，走到了街道上一面石墙边的大木门前。 四周的黑暗中有很多双眼睛在一闪一闪地盯着这个大人和小男孩。 大风衣对那些隐藏在黑暗中的眼睛有些警惕，他看过去的方向，那些闪闪的眼睛就像被吹灭的蜡烛一样消失。 大木门看上去又旧又重，门上却有一扇彩色玻璃窗，窗里透出来 的光让玻璃上的色彩看起来像在缓慢流动一样。 小男孩摇了摇大风衣的大手，好奇地指着那扇门说：“爷爷，我想 知道门后的东西是什么。” “喔?”大风衣有点意外，他用威严的声音对小男孩说，“红色，代表勇气；蓝色，代表智慧；黄色，代表好奇心，唯有这三者结合在 一起，才是我们寻找‘谜底’的能量。我的孩子，如果你想知道这扇门后是什么，就得用你的‘好奇心’来打开这扇门。” 小男孩听了就自己走到了大木门前，他回头问大风衣：“你不跟我 一起来吗，爷爷?\" 站在光亮边缘的大风衣对小男孩挥了挥手，说：“不了，我的孩子啊，这是你要独自面对的考验。”小男孩听后低头想了想，然后果断地推开了门。 门里照出来的强光将他小小的身影逐渐淹没时， 一阵悠长的声音也传到了他的耳中：“孩子啊，你要记住，‘解答’的过程是一个艰难而又凶险的赌局，善用你的勇气、智慧以及执著………我，会在这里看着你的…… ” ","date":"2023-09-16","objectID":"/posts/myblog08/:1:0","tags":["书籍"],"title":"查理九世","uri":"/posts/myblog08/"},{"categories":["书籍"],"content":"1 镜头一 怪狗狗查理九世 咕咕咕，后面没有了。本来想给大家整成文字的，可是力有不逮，只能把pdf搜集到的查理九世扫描件一共30本，分享给大家了，点击下载地址到我的网盘下载就可以了。 ","date":"2023-09-16","objectID":"/posts/myblog08/:2:0","tags":["书籍"],"title":"查理九世","uri":"/posts/myblog08/"},{"categories":["软件"],"content":"在安卓手机上浏览TikTok","date":"2023-07-30","objectID":"/posts/myblog07/","tags":["安卓"],"title":"安卓手机使用TikTok","uri":"/posts/myblog07/"},{"categories":["软件"],"content":"在安卓手机上浏览TikTok 注意 1、浏览需要科学上网，受政策影响本人无法提供,需要自行下载。 ","date":"2023-07-30","objectID":"/posts/myblog07/:0:0","tags":["安卓"],"title":"安卓手机使用TikTok","uri":"/posts/myblog07/"},{"categories":["软件"],"content":"1 下载 在我的网盘分享下载026仓库7z压缩包，解压后安装，在下载026保管员直接安装，全部安装两个应用，安卓、鸿蒙均可用。 ","date":"2023-07-30","objectID":"/posts/myblog07/:1:0","tags":["安卓"],"title":"安卓手机使用TikTok","uri":"/posts/myblog07/"},{"categories":["软件"],"content":"2 设置 两个安装包都安装好以后可在TikTok Plugin设置想浏览的国家，其他不用设置，随着浏览的深入国家设置基本失效，推送会基于浏览偏好 TikTok Plugin ","date":"2023-07-30","objectID":"/posts/myblog07/:2:0","tags":["安卓"],"title":"安卓手机使用TikTok","uri":"/posts/myblog07/"},{"categories":["软件"],"content":"3 尽情浏览 开启科学上网就可以尽情浏览了，至于账号我使用的谷歌账号快捷登陆，大家可以试试别的 TikTok ","date":"2023-07-30","objectID":"/posts/myblog07/:3:0","tags":["安卓"],"title":"安卓手机使用TikTok","uri":"/posts/myblog07/"},{"categories":["软件"],"content":"3 结语 我也是业余用户，在这里给大家介绍了一个简单软件，希望能帮助到大家。 ","date":"2023-07-30","objectID":"/posts/myblog07/:4:0","tags":["安卓"],"title":"安卓手机使用TikTok","uri":"/posts/myblog07/"},{"categories":["教程"],"content":"debian12安装steam的几个简单步骤","date":"2023-07-22","objectID":"/posts/myblog06/","tags":["debian"],"title":"debian12安装steam","uri":"/posts/myblog06/"},{"categories":["教程"],"content":"debian12安装steam的几个简单步骤. 注意 1、大家有留言可以到本期哔哩哔哩视频地址给我留言。 2、如果官网打不开可以在我的网盘分享下载，里面有8-8和8-6两个版本，目前最新是8-8,我用的是8-6 ","date":"2023-07-22","objectID":"/posts/myblog06/:0:0","tags":["debian"],"title":"debian12安装steam","uri":"/posts/myblog06/"},{"categories":["教程"],"content":"1 安装Steam Steam官网下载，下载完成后我们打开下载文件夹，右键在此位置打开终端，用命令安装steam sudo dpkg -i steam_latest.deb 安装完成后会提示我们缺失依赖我们用命令修复 sudo apt -f install 然后我们在开始菜单找到steam打开，会自动打开一个终端，让我们输入密码，我们输入自己的密码。然后终端运行一下会停住，我们回车，每次停住就回车，运行完后终端会自动关闭开始更新steam,更新完我们就可以登陆了。 ","date":"2023-07-22","objectID":"/posts/myblog06/:1:0","tags":["debian"],"title":"debian12安装steam","uri":"/posts/myblog06/"},{"categories":["教程"],"content":"2 安装GE-Proton ","date":"2023-07-22","objectID":"/posts/myblog06/:2:0","tags":["debian"],"title":"debian12安装steam","uri":"/posts/myblog06/"},{"categories":["教程"],"content":"2.1 下载 登陆完我们在任务栏退出steam，然后打开GE-Proton的发布页面，在右侧的Releases里点击最新版本，然后下载“.tar.gz”文件，下载完成后进入下载文件夹右键解压到当前文件夹。 ","date":"2023-07-22","objectID":"/posts/myblog06/:2:1","tags":["debian"],"title":"debian12安装steam","uri":"/posts/myblog06/"},{"categories":["教程"],"content":"2.2 安装 然后下载ProtonUp-Qt ，下载完成后双击就可以打开，点击add version然后在version选择对应的版本点击安装，它会显示正在下载一个过一会就失败了。我们自己将解压出的GE-Proton文件夹放入“主文件夹/.local/share/Steam/compatibilitytools.d/”文件夹下,.local文件夹需要选择显示隐藏文件夹才能看见。然后我们就能在steam中添加自己的破解游戏调用GE-Proton了 ","date":"2023-07-22","objectID":"/posts/myblog06/:2:2","tags":["debian"],"title":"debian12安装steam","uri":"/posts/myblog06/"},{"categories":["教程"],"content":"3 结语 我也是Linux的业余用户，在这里给大家介绍了一个简单的使用，希望能帮助到大家。 ","date":"2023-07-22","objectID":"/posts/myblog06/:3:0","tags":["debian"],"title":"debian12安装steam","uri":"/posts/myblog06/"},{"categories":["教程"],"content":"解决debian12开机卡failed to load iwl-debug-yoyo","date":"2023-07-22","objectID":"/posts/myblog05/","tags":["debian"],"title":"debian12开机卡failed to load iwl-debug-yoyo.bin (-2)","uri":"/posts/myblog05/"},{"categories":["教程"],"content":"解决debian12开机卡failed to load iwl-debug-yoyo. 注意 1、大家有留言可以到本期哔哩哔哩视频地址给我留言。 ","date":"2023-07-22","objectID":"/posts/myblog05/:0:0","tags":["debian"],"title":"debian12开机卡failed to load iwl-debug-yoyo.bin (-2)","uri":"/posts/myblog05/"},{"categories":["教程"],"content":"1 打开配置文件 这个问题是一个和WiFi-debug有关的固件没有加载成功，但对我们的WiFi和上网没有任何影响，我们关掉这个提示，首先打开配置文件。 sudo nano /etc/modprobe.d/iwlwifi.conf ","date":"2023-07-22","objectID":"/posts/myblog05/:1:0","tags":["debian"],"title":"debian12开机卡failed to load iwl-debug-yoyo.bin (-2)","uri":"/posts/myblog05/"},{"categories":["教程"],"content":"2 加入配置内容 文件打开可能是空白的，在文件中加入一行配置内容。 options iwlwifi enable_ini=N 加入后按Ctrl + X离开，再按Y保存，然后回车。 ","date":"2023-07-22","objectID":"/posts/myblog05/:2:0","tags":["debian"],"title":"debian12开机卡failed to load iwl-debug-yoyo.bin (-2)","uri":"/posts/myblog05/"},{"categories":["教程"],"content":"3 更新配置 sudo update-initramfs -u 配置已经应用了，以后开机就不会卡“failed to load iwl-debug-yoyo.bin (-2)”了。 ","date":"2023-07-22","objectID":"/posts/myblog05/:3:0","tags":["debian"],"title":"debian12开机卡failed to load iwl-debug-yoyo.bin (-2)","uri":"/posts/myblog05/"},{"categories":["教程"],"content":"4 结语 我也是Linux的业余用户，在这里给大家介绍了一个简单的配置，希望能帮助到大家。 ","date":"2023-07-22","objectID":"/posts/myblog05/:4:0","tags":["debian"],"title":"debian12开机卡failed to load iwl-debug-yoyo.bin (-2)","uri":"/posts/myblog05/"},{"categories":["教程"],"content":"这篇文章分享了几个装机工具和系统下载地址。","date":"2023-07-21","objectID":"/posts/myblog04/","tags":["windows"],"title":"从小白到装机大神","uri":"/posts/myblog04/"},{"categories":["教程"],"content":"这篇文章分享了几个装机工具和系统下载地址。 注意 1、大家有留言可以到本期哔哩哔哩视频地址给我留言。 2、点击蓝色标题即可跳转到下载页面。 3、本页只提供资源下载地址，详细安装过程可看视频教程 ","date":"2023-07-21","objectID":"/posts/myblog04/:0:0","tags":["windows"],"title":"从小白到装机大神","uri":"/posts/myblog04/"},{"categories":["教程"],"content":"1 在优盘中安装ventoy 在官网下载ventoy的最新版本选择好优盘点击安装即可 ","date":"2023-07-21","objectID":"/posts/myblog04/:1:0","tags":["windows"],"title":"从小白到装机大神","uri":"/posts/myblog04/"},{"categories":["教程"],"content":"2 放入微PE的iso文件 在官网下载微PE工具箱V2.3的64位版本，打开后点击右下角的光盘图标生成iso文件，在刚刚制做好的u盘中创建一个iso文件，并将文件复制到刚刚制作好的u盘中的iso文件夹。 ","date":"2023-07-21","objectID":"/posts/myblog04/:2:0","tags":["windows"],"title":"从小白到装机大神","uri":"/posts/myblog04/"},{"categories":["教程"],"content":"3 下载windows 下载win10或win11的iso文件放入iso文件夹 ","date":"2023-07-21","objectID":"/posts/myblog04/:3:0","tags":["windows"],"title":"从小白到装机大神","uri":"/posts/myblog04/"},{"categories":["教程"],"content":"4 下载驱动 下载360驱动大师检测驱动并安装，安装好驱动就可以卸载了。 ","date":"2023-07-21","objectID":"/posts/myblog04/:4:0","tags":["windows"],"title":"从小白到装机大神","uri":"/posts/myblog04/"},{"categories":["教程"],"content":"5 下载激活工具 下载激活工具，在使用激活工具时建议先关闭杀毒，右键以管理员身份运行，然后按1就可以了。视频教程。 ","date":"2023-07-21","objectID":"/posts/myblog04/:5:0","tags":["windows"],"title":"从小白到装机大神","uri":"/posts/myblog04/"},{"categories":["教程"],"content":"6 结语 我也是业余用户，在这里给大家介绍了几个工具，希望能帮助到大家。 ","date":"2023-07-21","objectID":"/posts/myblog04/:6:0","tags":["windows"],"title":"从小白到装机大神","uri":"/posts/myblog04/"},{"categories":["书籍"],"content":"这篇文章分享了一些马克思主义的书籍。","date":"2023-07-20","objectID":"/posts/myblog03/","tags":["书籍"],"title":"马恩列斯毛理论书籍","uri":"/posts/myblog03/"},{"categories":["书籍"],"content":"这篇文章分享了一些马克思主义的书籍。 注意 1、大家有留言可以到本期哔哩哔哩视频地址给我留言。 2、点击蓝色标题即可跳转到下载页面。 3、推荐安卓和鸿蒙使用这个本地阅读器。如不愿使用或无法使用，建议使用掌阅，亲尝多看、咪咕等无法导入部分书籍。 ","date":"2023-07-20","objectID":"/posts/myblog03/:0:0","tags":["书籍"],"title":"马恩列斯毛理论书籍","uri":"/posts/myblog03/"},{"categories":["书籍"],"content":"1 马恩列斯毛理论图书 ","date":"2023-07-20","objectID":"/posts/myblog03/:1:0","tags":["书籍"],"title":"马恩列斯毛理论书籍","uri":"/posts/myblog03/"},{"categories":["书籍"],"content":"1 马克思恩格斯全集 ","date":"2023-07-20","objectID":"/posts/myblog03/:1:1","tags":["书籍"],"title":"马恩列斯毛理论书籍","uri":"/posts/myblog03/"},{"categories":["书籍"],"content":"2 马克思恩格斯选集 ","date":"2023-07-20","objectID":"/posts/myblog03/:1:2","tags":["书籍"],"title":"马恩列斯毛理论书籍","uri":"/posts/myblog03/"},{"categories":["书籍"],"content":"3 列宁全集 ","date":"2023-07-20","objectID":"/posts/myblog03/:1:3","tags":["书籍"],"title":"马恩列斯毛理论书籍","uri":"/posts/myblog03/"},{"categories":["书籍"],"content":"4 列宁选集 ","date":"2023-07-20","objectID":"/posts/myblog03/:1:4","tags":["书籍"],"title":"马恩列斯毛理论书籍","uri":"/posts/myblog03/"},{"categories":["书籍"],"content":"5 斯大林选集 斯大林选集由于.chm后缀的图书无法上传，所以在文件后面加入了.txt后缀，阅读时删除.txt后缀，所有书籍都可导入掌阅软件本地阅读。 ","date":"2023-07-20","objectID":"/posts/myblog03/:1:5","tags":["书籍"],"title":"马恩列斯毛理论书籍","uri":"/posts/myblog03/"},{"categories":["书籍"],"content":"6 毛泽东选集 ","date":"2023-07-20","objectID":"/posts/myblog03/:1:6","tags":["书籍"],"title":"马恩列斯毛理论书籍","uri":"/posts/myblog03/"},{"categories":["书籍"],"content":"2 其他读物 ","date":"2023-07-20","objectID":"/posts/myblog03/:2:0","tags":["书籍"],"title":"马恩列斯毛理论书籍","uri":"/posts/myblog03/"},{"categories":["书籍"],"content":"1 马克思传-戴维.麦克莱伦 ","date":"2023-07-20","objectID":"/posts/myblog03/:2:1","tags":["书籍"],"title":"马恩列斯毛理论书籍","uri":"/posts/myblog03/"},{"categories":["书籍"],"content":"2 毛泽东文集 ","date":"2023-07-20","objectID":"/posts/myblog03/:2:2","tags":["书籍"],"title":"马恩列斯毛理论书籍","uri":"/posts/myblog03/"},{"categories":["书籍"],"content":"3 资本论 ","date":"2023-07-20","objectID":"/posts/myblog03/:2:3","tags":["书籍"],"title":"马恩列斯毛理论书籍","uri":"/posts/myblog03/"},{"categories":["书籍"],"content":"4 共产党宣言 ","date":"2023-07-20","objectID":"/posts/myblog03/:2:4","tags":["书籍"],"title":"马恩列斯毛理论书籍","uri":"/posts/myblog03/"},{"categories":["书籍"],"content":"5 大国悲剧-苏联解体的前因后果 原苏联部长会议主席雷日科夫以独特的视角深刻分析了苏联解体的整体内在逻辑，揭示了与其相关联的各种事件之间的前因后果 ","date":"2023-07-20","objectID":"/posts/myblog03/:2:5","tags":["书籍"],"title":"马恩列斯毛理论书籍","uri":"/posts/myblog03/"},{"categories":["书籍"],"content":"6 中国国家治理的制度逻辑-一个组织学研究 ","date":"2023-07-20","objectID":"/posts/myblog03/:2:6","tags":["书籍"],"title":"马恩列斯毛理论书籍","uri":"/posts/myblog03/"},{"categories":["书籍"],"content":"7 政治的逻辑-马克思主义政治学原理 ","date":"2023-07-20","objectID":"/posts/myblog03/:2:7","tags":["书籍"],"title":"马恩列斯毛理论书籍","uri":"/posts/myblog03/"},{"categories":["书籍"],"content":"8 北上-党中央与张国焘斗争始末 ","date":"2023-07-20","objectID":"/posts/myblog03/:2:8","tags":["书籍"],"title":"马恩列斯毛理论书籍","uri":"/posts/myblog03/"},{"categories":["书籍"],"content":"9 中国震撼世界 类似红星照耀中国(西行漫记)是一本外国人到游击区采访的书，给我印像深刻的是书里有一位女性，从喜欢邻家大哥的小女生到被父母嫁给老男人被虐待，到斗恶公公，到成为革命者的故事。 ","date":"2023-07-20","objectID":"/posts/myblog03/:2:9","tags":["书籍"],"title":"马恩列斯毛理论书籍","uri":"/posts/myblog03/"},{"categories":["书籍"],"content":"10 习近平谈治国理政一二卷 ","date":"2023-07-20","objectID":"/posts/myblog03/:2:10","tags":["书籍"],"title":"马恩列斯毛理论书籍","uri":"/posts/myblog03/"},{"categories":["书籍"],"content":"3 结语 我也是普通的读者，在这里给大家分享几本书，希望能帮助到大家。 ","date":"2023-07-20","objectID":"/posts/myblog03/:3:0","tags":["书籍"],"title":"马恩列斯毛理论书籍","uri":"/posts/myblog03/"},{"categories":["教程"],"content":"这篇文章是一个示例文章","date":"2023-07-06","objectID":"/posts/myblog02/","tags":["linux"],"title":"linux系统硬盘的自动挂载","uri":"/posts/myblog02/"},{"categories":["教程"],"content":"这篇文章展示了/etc/fstab简单配置. 注意 本期视频地址. fstab文件非常重要，如果内容语法错误可能无法开机。 ","date":"2023-07-06","objectID":"/posts/myblog02/:0:0","tags":["linux"],"title":"linux系统硬盘的自动挂载","uri":"/posts/myblog02/"},{"categories":["教程"],"content":"1 打开fstab配置文件 sudo nano /etc/fstab ","date":"2023-07-06","objectID":"/posts/myblog02/:1:0","tags":["linux"],"title":"linux系统硬盘的自动挂载","uri":"/posts/myblog02/"},{"categories":["教程"],"content":"2 加入配置内容 在末尾加入一行配置内容，第一部分为要挂载的分区，第二部分为要挂载的地址，第三部分为文件系统（windows创建的一般为ntfs,Linux创建的一般为ext4）,后面的默认不要管他就行。 /dev/sdb2 /home/hsj/下载/文件2 ntfs defaults 0 0 配置的时候不要删除多了，把空格删除了，虽然我感觉可能没影响，但我们还是严谨一点防止出现问题。语句的最后一个0后面加一个空格，完后换一行保留空白，按Ctrl + X离开，再按Y保存，然后回车，以后重启就会默认自动挂载了。 ","date":"2023-07-06","objectID":"/posts/myblog02/:2:0","tags":["linux"],"title":"linux系统硬盘的自动挂载","uri":"/posts/myblog02/"},{"categories":["教程"],"content":"3 结语 我也是Linux的业余用户，在这里给大家介绍了一个简单的配置，希望能帮助到大家。 ","date":"2023-07-06","objectID":"/posts/myblog02/:3:0","tags":["linux"],"title":"linux系统硬盘的自动挂载","uri":"/posts/myblog02/"},{"categories":["教程"],"content":"这篇文章是一个示例文章","date":"2023-06-21","objectID":"/posts/myblog01/","tags":["debian"],"title":"Debian安装后的简单设置","uri":"/posts/myblog01/"},{"categories":["教程"],"content":"这篇文章展示了Debian安装后需要用到的几个简单命令. 注意 1、我的哔哩哔哩主页. 2、完整本地安装文件下载页面，下载页面最下面的debian-12.0.0-amd64-DVD-1.iso，安装时有一步询问有庞大的软件包是否使用网络源安装的选择否不使用就行了。 3、Debian12的网络安装iso文件自带了wifi驱动，不用在下载wifi驱动放到写入好的优盘当中了。 ","date":"2023-06-21","objectID":"/posts/myblog01/:0:0","tags":["debian"],"title":"Debian安装后的简单设置","uri":"/posts/myblog01/"},{"categories":["教程"],"content":"1 加入sudo用户组 安装debian完成后sudo命令是使用不了的，我们要把当前用户加入sudo用户组，首先输入su -回车进入root用户，需要输入密码，密码不显示 #切换root用户 su - #加入sudo用户组 usermod -aG sudo 要加入的用户名 #推荐加入dialout用户组使用串口更方便 usermod -a -G dialout 要加入的用户名 #回到普通用户 exit ","date":"2023-06-21","objectID":"/posts/myblog01/:1:0","tags":["debian"],"title":"Debian安装后的简单设置","uri":"/posts/myblog01/"},{"categories":["教程"],"content":"2 换源 我个人习惯清华源，每次安装完Debian后都会把软件源修改成清华源，命令如下 #打开源文件 sudo nano /etc/apt/sources.list 将文件中的内容删除，将如下全部内容粘贴到文件中，以下为Debian12的清华源，Debian其他版本和其他Linux发行版请自行上网上查询源的内容。 # 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释 deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware # deb https://mirrors.tuna.tsinghua.edu.cn/debian-security bookworm-security main contrib non-free non-free-firmware # # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security bookworm-security main contrib non-free non-free-firmware deb https://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware # deb-src https://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware 按Ctrl + X离开，再按Y保存。 ","date":"2023-06-21","objectID":"/posts/myblog01/:2:0","tags":["debian"],"title":"Debian安装后的简单设置","uri":"/posts/myblog01/"},{"categories":["教程"],"content":"3 更新系统 接下来更新系统 #更新所有软件包的最新版本信息 sudo apt update #更新所有软件包到最新版本 sudo apt upgrade ","date":"2023-06-21","objectID":"/posts/myblog01/:3:0","tags":["debian"],"title":"Debian安装后的简单设置","uri":"/posts/myblog01/"},{"categories":["教程"],"content":"4 安装Nvidia显卡驱动 网友说AMD显卡的驱动对linux支持比较友好，是自带的。我没有AMD显卡，也没有尝试过，网友们遇到问题可以百度寻找一下解决办法，安装Nvidia的显卡驱动只需要一行命令就行了。 #安装推荐的nvidia驱动程序 sudo apt install nvidia-driver 安装完成那个后推荐使用X11登陆桌面 ","date":"2023-06-21","objectID":"/posts/myblog01/:4:0","tags":["debian"],"title":"Debian安装后的简单设置","uri":"/posts/myblog01/"},{"categories":["教程"],"content":"5 结语 我也是Linux的业余用户，在这里给大家介绍了安装Debian12完成后用到的几个常用的命令，希望能帮助到大家。 ","date":"2023-06-21","objectID":"/posts/myblog01/:5:0","tags":["debian"],"title":"Debian安装后的简单设置","uri":"/posts/myblog01/"},{"categories":["教程"],"content":"这篇文章展示了基本的 Markdown 语法和格式.","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["教程"],"content":"这篇文章提供了可以在 Hugo 的文章中使用的基本 Markdown 语法示例. 注意 这篇文章借鉴了一篇很棒的来自 Grav 的文章. 如果你想了解 Loveit 主题的扩展 Markdown 语法, 请阅读扩展 Markdown 语法页面. 事实上, 编写 Web 内容很麻烦. WYSIWYG所见即所得 编辑器帮助减轻了这一任务. 但通常会导致代码太糟, 或更糟糕的是, 网页也会很丑. 没有通常伴随的所有复杂和丑陋的问题, Markdown 是一种更好的生成 HTML 内容的方式. 一些主要好处是: Markdown 简单易学, 几乎没有多余的字符, 因此编写内容也更快. 用 Markdown 书写时出错的机会更少. 可以产生有效的 XHTML 输出. 将内容和视觉显示保持分开, 这样就不会打乱网站的外观. 可以在你喜欢的任何文本编辑器或 Markdown 应用程序中编写内容. Markdown 使用起来很有趣! John Gruber, Markdown 的作者如是说: Markdown 格式的首要设计目标是更具可读性. 最初的想法是 Markdown 格式的文档应当以纯文本形式发布, 而不会看起来像被标签或格式说明所标记. 虽然 Markdown 的语法受到几种现有的文本到 HTML 转换工具的影响, 但 Markdown 语法的最大灵感来源是纯文本电子邮件的格式. – John Gruber 话不多说, 我们来回顾一下 Markdown 的主要语法以及生成的 HTML 样式! 技巧  将此页保存为书签，以备将来参考! ","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/:0:0","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["教程"],"content":"1 标题 从 h2 到 h6 的标题在每个级别上都加上一个 ＃: ## h2 标题 ### h3 标题 #### h4 标题 ##### h5 标题 ###### h6 标题 输出的 HTML 看起来像这样: \u003ch2\u003eh2 标题\u003c/h2\u003e \u003ch3\u003eh3 标题\u003c/h3\u003e \u003ch4\u003eh4 标题\u003c/h4\u003e \u003ch5\u003eh5 标题\u003c/h5\u003e \u003ch6\u003eh6 标题\u003c/h6\u003e 标题 ID 要添加自定义标题 ID, 请在与标题相同的行中将自定义 ID 放在花括号中: ### 一个很棒的标题 {#custom-id} 输出的 HTML 看起来像这样: \u003ch3 id=\"custom-id\"\u003e一个很棒的标题\u003c/h3\u003e ","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/:1:0","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["教程"],"content":"2 注释 注释是和 HTML 兼容的： \u003c!-- 这是一段注释 --\u003e 不能看到以下的注释: ","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/:2:0","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["教程"],"content":"3 水平线 HTML 中的 \u003chr\u003e 标签是用来在段落元素之间创建一个 “专题间隔” 的. 使用 Markdown, 你可以用以下方式创建一个 \u003chr\u003e 标签: ___: 三个连续的下划线 ---: 三个连续的破折号 ***: 三个连续的星号 呈现的输出效果如下: ","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/:3:0","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["教程"],"content":"4 段落 按照纯文本的方式书写段落, 纯文本在呈现的 HTML 中将用 \u003cp\u003e/\u003c/p\u003e 标签包裹. 如下段落: Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. 输出的 HTML 看起来像这样: \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e 可以使用一个空白行进行换行. ","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/:4:0","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["教程"],"content":"5 内联 HTML 元素 如果你需要某个 HTML 标签 (带有一个类), 则可以简单地像这样使用: Markdown 格式的段落. \u003cdiv class=\"class\"\u003e 这是 \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Markdown 格式的段落. ","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/:5:0","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["教程"],"content":"6 强调 ","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/:6:0","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["教程"],"content":"加粗 用于强调带有较粗字体的文本片段. 以下文本片段会被 渲染为粗体. **渲染为粗体** __渲染为粗体__ 输出的 HTML 看起来像这样: \u003cstrong\u003e渲染为粗体\u003c/strong\u003e ","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/:6:1","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["教程"],"content":"斜体 用于强调带有斜体的文本片段. 以下文本片段被 渲染为斜体. *渲染为斜体* _渲染为斜体_ 输出的 HTML 看起来像这样: \u003cem\u003e渲染为斜体\u003c/em\u003e ","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/:6:2","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["教程"],"content":"删除线 按照 GFMGitHub flavored Markdown 你可以使用删除线. ~~这段文本带有删除线.~~ 呈现的输出效果如下: 这段文本带有删除线. 输出的 HTML 看起来像这样: \u003cdel\u003e这段文本带有删除线.\u003c/del\u003e ","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/:6:3","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["教程"],"content":"组合 加粗, 斜体, 和删除线可以 组合使用. ***加粗和斜体*** ~~**删除线和加粗**~~ ~~*删除线和斜体*~~ ~~***加粗, 斜体和删除线***~~ 呈现的输出效果如下: 加粗和斜体 删除线和加粗 删除线和斜体 加粗, 斜体和删除线 输出的 HTML 看起来像这样: \u003cem\u003e\u003cstrong\u003e加粗和斜体\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003e删除线和加粗\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e删除线和斜体\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003e加粗, 斜体和删除线\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/:6:4","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["教程"],"content":"7 引用 用于在文档中引用其他来源的内容块. 在要引用的任何文本之前添加 \u003e: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 呈现的输出效果如下: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 输出的 HTML 看起来像这样: \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e 引用也可以嵌套: \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. 呈现的输出效果如下: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/:7:0","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["教程"],"content":"8 列表 ","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/:8:0","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["教程"],"content":"无序列表 一系列项的列表, 其中项的顺序没有明显关系. 你可以使用以下任何符号来表示无序列表中的项: * 一项内容 - 一项内容 + 一项内容 例如: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/:8:1","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["教程"],"content":"有序列表 一系列项的列表, 其中项的顺序确实很重要. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e 技巧 如果你对每一项使用 1., Markdown 将自动为每一项编号. 例如: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem ","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/:8:2","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["教程"],"content":"任务列表 任务列表使你可以创建带有复选框的列表. 要创建任务列表, 请在任务列表项之前添加破折号 (-) 和带有空格的方括号 ([ ]). 要选择一个复选框，请在方括号之间添加 x ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media 呈现的输出效果如下: Write the press release Update the website Contact the media ","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/:8:3","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["教程"],"content":"9 代码 ","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/:9:0","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["教程"],"content":"行内代码 用 ` 包装行内代码段. 在这个例子中, `\u003csection\u003e\u003c/section\u003e` 会被包裹成 **代码**. 呈现的输出效果如下: 在这个例子中, \u003csection\u003e\u003c/section\u003e 会被包裹成 代码. 输出的 HTML 看起来像这样: \u003cp\u003e 在这个例子中, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e 会被包裹成 \u003cstrong\u003e代码\u003c/strong\u003e. \u003c/p\u003e ","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/:9:1","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["教程"],"content":"缩进代码 将几行代码缩进至少四个空格，例如: // Some comments line 1 of code line 2 of code line 3 of code 呈现的输出效果如下: // Some comments line 1 of code line 2 of code line 3 of code 输出的 HTML 看起来像这样: \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/:9:2","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["教程"],"content":"围栏代码块 使用 “围栏” ``` 来生成一段带有语言属性的代码块. ```markdown Sample text here... ``` 输出的 HTML 看起来像这样: \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/:9:3","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["教程"],"content":"语法高亮 GFMGitHub Flavored Markdown 也支持语法高亮. 要激活它，只需在第一个代码 “围栏” 之后直接添加你要使用的语言的文件扩展名, ```js, 语法高亮显示将自动应用于渲染的 HTML 中. 例如, 在以下 JavaScript 代码中应用语法高亮: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` 呈现的输出效果如下: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; 注意 Hugo 文档中的 语法高亮页面 介绍了有关语法高亮的更多信息, 包括语法高亮的 shortcode. ","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/:9:4","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["教程"],"content":"10 表格 通过在每个单元格之间添加竖线作为分隔线, 并在标题下添加一行破折号 (也由竖线分隔) 来创建表格. 注意, 竖线不需要垂直对齐. | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. 输出的 HTML 看起来像这样: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e 文本右对齐或居中对齐 在任何标题下方的破折号右侧添加冒号将使该列的文本右对齐. 在任何标题下方的破折号两边添加冒号将使该列的对齐文本居中. | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. ","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/:10:0","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["教程"],"content":"11 链接 ","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/:11:0","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["教程"],"content":"基本链接 \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) 呈现的输出效果如下 (将鼠标悬停在链接上，没有提示): https://assemble.io contact@revolunet.com Assemble 输出的 HTML 看起来像这样: \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/:11:1","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["教程"],"content":"添加一个标题 [Upstage](https://github.com/upstage/ \"Visit Upstage!\") 呈现的输出效果如下 (将鼠标悬停在链接上，会有一行提示): Upstage 输出的 HTML 看起来像这样: \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/:11:2","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["教程"],"content":"定位标记 定位标记使你可以跳至同一页面上的指定锚点. 例如, 每个章节: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) 将跳转到这些部分: ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. 注意 定位标记的位置几乎是任意的. 因为它们并不引人注目, 所以它们通常被放在同一行了. ","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/:11:3","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["教程"],"content":"12 脚注 脚注使你可以添加注释和参考, 而不会使文档正文混乱. 当你创建脚注时, 会在添加脚注引用的位置出现带有链接的上标编号. 读者可以单击链接以跳至页面底部的脚注内容. 要创建脚注引用, 请在方括号中添加插入符号和标识符 ([^1]). 标识符可以是数字或单词, 但不能包含空格或制表符. 标识符仅将脚注引用与脚注本身相关联 - 在脚注输出中, 脚注按顺序编号. 在中括号内使用插入符号和数字以及用冒号和文本来添加脚注内容 ([^1]：这是一段脚注). 你不一定要在文档末尾添加脚注. 可以将它们放在除列表, 引用和表格等元素之外的任何位置. 这是一个数字脚注[^1]. 这是一个带标签的脚注[^label] [^1]: 这是一个数字脚注 [^label]: 这是一个带标签的脚注 这是一个数字脚注1. 这是一个带标签的脚注2 ","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/:12:0","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"},{"categories":["教程"],"content":"13 图片 图片的语法与链接相似, 但包含一个在前面的感叹号. ![Minion](https://octodex.github.com/images/minion.png) 或者: ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") The Stormtroopocat 像链接一样, 图片也具有脚注样式的语法: ![Alt text][id] The Dojocat 稍后在文档中提供参考内容, 用来定义 URL 的位置: [id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\" 技巧 LoveIt 主题提供了一个包含更多功能的 图片的 shortcode. 这是一个数字脚注 ↩︎ 这是一个带标签的脚注 ↩︎ ","date":"2023-06-20","objectID":"/posts/basic-markdown-syntax/:13:0","tags":["Markdown"],"title":"Markdown 基本语法","uri":"/posts/basic-markdown-syntax/"}]